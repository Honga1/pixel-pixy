{"version":3,"sources":["CanvasContainer.tsx","ColorSquare.tsx","ColorPickerHistory.tsx","CurrentColor.tsx","LoadButton.tsx","SaveButton.tsx","ClearButton.tsx","Grid.tsx","ToggleButton.tsx","ColorPickerSwatch.tsx","App.tsx","index.tsx"],"names":["CanvasContainer","color","onCanvasCreated","loadedImage","changeToClear","pixelDimensions","canvasRef","useRef","useEffect","canvas","current","context","getContext","drawImage","width","height","clearRect","onTouchEvent","event","maybeTouch","changedTouches","touch","scaledX","clientX","clientWidth","scaledY","clientY","clientHeight","quantX","Math","floor","quantY","fillStyle","fillRect","className","style","backgroundSize","ref","onTouchEnd","onTouchMove","ColorSquare","backgroundColor","ColorPickerHistory","colorSelected","onColorPicked","useState","colorHistory","setColorHistory","newColorHistory","unshift","length","slice","map","index","CurrentColor","LoadButton","setLoadedImage","onChange","a","imagePromise","Promise","resolve","reject","imageUrl","URL","createObjectURL","target","files","image","Image","src","onload","type","SaveButton","fullScaleCanvas","document","createElement","window","innerWidth","imageSmoothingEnabled","toDataURL","href","download","ClearButton","onClearPressed","Grid","rootCanvas","strokeStyle","lineWidth","xIncrement","xIndex","moveTo","round","lineTo","stroke","yIncrement","console","log","yIndex","ToggleButton","onToggle","text","ColorPickerSwatch","gridRow","gridColumn","App","setColor","isGridShown","setGridShown","isPickerShown","setPickerShown","setCanvas","clearCounter","setClearCounter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.59cc06b1.chunk.js","sourcesContent":["import { useEffect, useRef, TouchEvent } from \"react\";\nimport \"./styles/CanvasContainer.css\";\n\nexport const CanvasContainer = ({\n  color,\n  onCanvasCreated,\n  loadedImage,\n  changeToClear,\n  pixelDimensions,\n}: {\n  pixelDimensions: number;\n  color: string;\n  onCanvasCreated: (canvas: HTMLCanvasElement) => void;\n  loadedImage: HTMLImageElement | undefined;\n  changeToClear: number;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      onCanvasCreated(canvas);\n    }\n  }, [onCanvasCreated]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n\n    if (!context || !canvas || !loadedImage) return;\n\n    context.drawImage(loadedImage, 0, 0, canvas.width, canvas.height);\n  }, [loadedImage]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n\n    if (!(context && canvas)) return;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }, [changeToClear]);\n\n  const onTouchEvent = (event: TouchEvent<HTMLCanvasElement>) => {\n    const maybeTouch = event.changedTouches[0];\n    if (!maybeTouch) return;\n\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n    if (!context || !canvas) return;\n\n    const touch = maybeTouch;\n\n    const scaledX = (touch.clientX / canvas.clientWidth) * pixelDimensions;\n    const scaledY = (touch.clientY / canvas.clientHeight) * pixelDimensions;\n\n    const quantX = Math.floor(scaledX);\n    const quantY = Math.floor(scaledY);\n\n    context.fillStyle = color;\n    context.fillRect(quantX, quantY, 1, 1);\n  };\n\n  return (\n    <div className=\"CanvasContainer\">\n      <canvas\n        style={{\n          backgroundSize: `${100 / pixelDimensions / 2}%`,\n        }}\n        ref={canvasRef}\n        width={pixelDimensions}\n        height={pixelDimensions}\n        onTouchEnd={onTouchEvent}\n        onTouchMove={onTouchEvent}\n      ></canvas>\n    </div>\n  );\n};\n","import \"./styles/ColorSquare.css\";\nimport { TouchEvent } from \"react\";\n\nexport const ColorSquare = ({\n  color,\n  onTouchEnd,\n}: {\n  color: string;\n  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void;\n}) => {\n  return (\n    <div\n      onTouchEnd={onTouchEnd}\n      style={{ backgroundColor: color }}\n      className=\"ColorSquare\"\n    ></div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { ColorSquare } from \"./ColorSquare\";\nimport \"./styles/ColorPickerHistory.css\";\n\nexport const ColorPickerHistory = ({\n  colorSelected,\n  onColorPicked,\n}: {\n  colorSelected: string;\n  onColorPicked: (color: string) => void;\n}) => {\n  const [colorHistory, setColorHistory] = useState<string[]>([]);\n\n  useEffect(() => {\n    let newColorHistory = [...colorHistory];\n    newColorHistory.unshift(colorSelected);\n    if (newColorHistory.length > 8) {\n      newColorHistory = newColorHistory.slice(0, 8);\n    }\n\n    setColorHistory(newColorHistory);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [colorSelected]);\n\n  return (\n    <div className=\"ColorPickerHistory\">\n      Color History\n      <div className=\"RowZero\">\n        {colorHistory.map((color, index) => (\n          <ColorSquare\n            onTouchEnd={() => onColorPicked(color)}\n            key={index}\n            color={color}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { ColorSquare } from \"./ColorSquare\";\nimport \"./styles/CurrentColor.css\";\n\nexport const CurrentColor = ({ color }: { color: string }) => {\n  return (\n    <div className=\"CurrentColor\">\n      <div>CurrentColor</div>\n      <ColorSquare color={color}></ColorSquare>\n    </div>\n  );\n};\n","export const LoadButton = ({\n  setLoadedImage,\n}: {\n  setLoadedImage: (image: HTMLImageElement) => void;\n}) => {\n  return (\n    <input\n      onChange={async (event) => {\n        const imagePromise = new Promise<HTMLImageElement>(\n          (resolve, reject) => {\n            const imageUrl = URL.createObjectURL(event.target.files![0]);\n            const image = new Image();\n            image.src = imageUrl;\n            image.onload = () => resolve(image);\n          }\n        );\n        const image = await imagePromise;\n\n        setLoadedImage(image);\n      }}\n      type=\"file\"\n    />\n  );\n};\n","export const SaveButton = ({ canvas }: { canvas: HTMLCanvasElement }) => {\n  return (\n    <a\n      onTouchEnd={(event) => {\n        const fullScaleCanvas = document.createElement(\"canvas\");\n        fullScaleCanvas.width = window.innerWidth;\n        fullScaleCanvas.height = window.innerWidth;\n        const context = fullScaleCanvas.getContext(\"2d\")!;\n        context.imageSmoothingEnabled = false;\n        context.drawImage(\n          canvas,\n          0,\n          0,\n          fullScaleCanvas.width,\n          fullScaleCanvas.height\n        );\n\n        const image = fullScaleCanvas.toDataURL(\"image/png\");\n        (event.target as EventTarget & HTMLAnchorElement).href = image;\n      }}\n      href=\"/\"\n      download=\"my-pixel-art.png\"\n    >\n      Save\n    </a>\n  );\n};\n","export const ClearButton = ({\n  onClearPressed,\n}: {\n  onClearPressed: () => void;\n}) => {\n  return <button onTouchEnd={onClearPressed}>Clear Canvas</button>;\n};\n","import { useEffect, useRef } from \"react\";\nimport \"./styles/Grid.css\";\n\nexport const Grid = ({\n  pixelDimensions,\n  rootCanvas,\n}: {\n  pixelDimensions: number;\n  rootCanvas: HTMLCanvasElement;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n\n    if (!context || !canvas) return;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.strokeStyle = \"lightgrey\";\n    context.lineWidth = 1;\n    const xIncrement = canvas.width / pixelDimensions;\n    for (let xIndex = 0; xIndex < pixelDimensions; xIndex++) {\n      context.moveTo(Math.round(xIndex * xIncrement), 0);\n      context.lineTo(Math.round(xIndex * xIncrement), canvas.height);\n      context.stroke();\n    }\n\n    // Horizontal lines\n    const yIncrement = canvas.height / pixelDimensions;\n    console.log(yIncrement);\n    for (let yIndex = 0; yIndex < pixelDimensions; yIndex++) {\n      context.moveTo(0, Math.round(yIndex * yIncrement));\n      context.lineTo(canvas.width, Math.round(yIndex * yIncrement));\n      context.stroke();\n    }\n  });\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"Grid\"\n      width={rootCanvas.clientWidth}\n      height={rootCanvas.clientHeight}\n    ></canvas>\n  );\n};\n","export const ToggleButton = ({\n  onToggle,\n  text,\n}: {\n  onToggle: () => void;\n  text: string;\n}) => {\n  return <button onTouchEnd={onToggle}>{text}</button>;\n};\n","import { ColorSquare } from \"./ColorSquare\";\nimport \"./styles/ColorPickerSwatch.css\";\n\nexport const ColorPickerSwatch = ({\n  onColorPicked,\n}: {\n  onColorPicked: (color: string) => void;\n}) => {\n  const colors = [\n    \"#060608\",\n    \"#141013\",\n    \"#3b1725\",\n    \"#73172d\",\n    \"#b4202a\",\n    \"#df3e23\",\n    \"#fa6a0a\",\n    \"#f9a31b\",\n    \"#ffd541\",\n    \"#fffc40\",\n    \"#d6f264\",\n    \"#9cdb43\",\n    \"#59c135\",\n    \"#14a02e\",\n    \"#1a7a3e\",\n    \"#24523b\",\n    \"#122020\",\n    \"#143464\",\n    \"#285cc4\",\n    \"#249fde\",\n    \"#20d6c7\",\n    \"#a6fcdb\",\n    \"#ffffff\",\n    \"#fef3c0\",\n    \"#fad6b8\",\n    \"#f5a097\",\n    \"#e86a73\",\n    \"#bc4a9b\",\n    \"#793a80\",\n    \"#403353\",\n    \"#242234\",\n    \"#221c1a\",\n    \"#322b28\",\n    \"#71413b\",\n    \"#bb7547\",\n    \"#dba463\",\n    \"#f4d29c\",\n    \"#dae0ea\",\n    \"#b3b9d1\",\n    \"#8b93af\",\n    \"#6d758d\",\n    \"#4a5462\",\n    \"#333941\",\n    \"#422433\",\n    \"#5b3138\",\n    \"#8e5252\",\n    \"#ba756a\",\n    \"#e9b5a3\",\n    \"#e3e6ff\",\n    \"#b9bffb\",\n    \"#849be4\",\n    \"#588dbe\",\n    \"#477d85\",\n    \"#23674e\",\n    \"#328464\",\n    \"#5daf8d\",\n    \"#92dcba\",\n    \"#cdf7e2\",\n    \"#e4d2aa\",\n    \"#c7b08b\",\n    \"#a08662\",\n    \"#796755\",\n    \"#5a4e44\",\n    \"#423934\",\n  ];\n  return (\n    <div className=\"ColorPickerSwatch\">\n      {colors.map((color, index) => (\n        <div\n          style={{\n            gridRow: (index - (index % 8)) / 8 + 1,\n            gridColumn: (index % 8) + 1,\n          }}\n        >\n          <ColorSquare\n            onTouchEnd={() => onColorPicked(color)}\n            key={color}\n            color={color}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./styles/App.css\";\nimport { CanvasContainer } from \"./CanvasContainer\";\nimport { ColorPickerHistory } from \"./ColorPickerHistory\";\nimport { CurrentColor } from \"./CurrentColor\";\nimport { LoadButton } from \"./LoadButton\";\nimport { SaveButton } from \"./SaveButton\";\nimport { ClearButton } from \"./ClearButton\";\nimport { Grid } from \"./Grid\";\nimport { ToggleButton } from \"./ToggleButton\";\nimport { ColorPickerSwatch } from \"./ColorPickerSwatch\";\n\nfunction App() {\n  // Between 2 and 24\n  const pixelDimensions = 8;\n\n  const [color, setColor] = useState<string>(\"black\");\n  const [isGridShown, setGridShown] = useState(false);\n  const [isPickerShown, setPickerShown] = useState(false);\n  const [canvas, setCanvas] = useState<undefined | HTMLCanvasElement>();\n  const [loadedImage, setLoadedImage] = useState<\n    HTMLImageElement | undefined\n  >();\n  const [clearCounter, setClearCounter] = useState(0);\n  return (\n    <div className=\"App\">\n      {isPickerShown && <ColorPickerSwatch onColorPicked={setColor} />}\n      <CanvasContainer\n        onCanvasCreated={setCanvas}\n        color={color}\n        loadedImage={loadedImage}\n        changeToClear={clearCounter}\n        pixelDimensions={pixelDimensions}\n      />\n      {canvas && isGridShown && (\n        <Grid pixelDimensions={pixelDimensions} rootCanvas={canvas} />\n      )}\n      <ColorPickerHistory onColorPicked={setColor} colorSelected={color} />\n      <CurrentColor color={color} />\n      <LoadButton setLoadedImage={setLoadedImage} />\n      {canvas && <SaveButton canvas={canvas} />}\n      <ClearButton\n        onClearPressed={() => {\n          setClearCounter(clearCounter + 1);\n        }}\n      />\n      <ToggleButton\n        onToggle={() => setGridShown(!isGridShown)}\n        text={isGridShown ? \"Hide Grid\" : \"Show Grid\"}\n      />\n      <ToggleButton\n        onToggle={() => setPickerShown(!isPickerShown)}\n        text={isGridShown ? \"Hide Color Picker\" : \"Show Color Picker\"}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
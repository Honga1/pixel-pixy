{"version":3,"sources":["drivers/Color.ts","components/ColorPickerHistory.tsx","components/PinnedColors.tsx","BodyColorPicker.tsx","components/CanvasContainer.tsx","components/Grid.tsx","CanvasStack.tsx","ConfirmModal.tsx","drivers/UndoablePaintCanvas.ts","drivers/getRelativeClickPosition.tsx","components/SaveButton.tsx","Footer.tsx","components/DimensionPicker.tsx","components/LoadButton.tsx","NewPageModal.tsx","PaletteDictionary.tsx","PalettePicker.tsx","PaletteModal.tsx","drivers/useLongPress.tsx","SettingsModal.tsx","components/DropperIcon.tsx","components/PaletteIcon.tsx","HighlightableButton.tsx","ToolsBanner.tsx","App.tsx","index.tsx"],"names":["HSLColor","hue","saturation","lightness","hsl","this","hslString","sep","indexOf","substr","split","hString","s","parseFloat","length","l","h","Math","round","PI","r","g","b","cMin","min","cMax","max","delta","abs","RGBColor","fromHSL","red","green","blue","rgb","RangeError","c","x","m","hex","Number","isInteger","TypeError","hexString","toString","fromHexString","rgbString","rgbChunks","rgbValues","R","parseInt","rString","gString","bString","fromRGB","a","r1","g1","b1","r2","g2","b2","NO_COLOR","ColorPickerHistory","colorSelected","onColorPicked","colorHistory","setColorHistory","useEffect","filter","color","Equals","newColorHistory","unshift","slice","Box","className","direction","justify","wrap","gap","map","index","height","width","pad","bottom","Button","fill","size","onClick","style","backgroundColor","toHex","border","PinnedColors","pinnedColors","BodyColorPicker","setColorAndTurnOffPicker","pickerMode","palette","CanvasContainer","onCanvasCreated","onTouchEvent","pixelDimensions","canvasRef","useRef","canvas","current","onInnerTouchEvent","event","backgroundSize","ref","onTouchEnd","onTouchMove","Grid","rootCanvas","context","getContext","clearRect","strokeStyle","lineWidth","xIncrement","xIndex","moveTo","lineTo","stroke","yIncrement","yIndex","clientWidth","clientHeight","CanvasStack","isGridShown","onCanvasTouch","stackProps","useState","setCanvas","Stack","ConfirmModal","onAccept","onCancel","message","cancelButtonText","acceptButtonText","Layer","modal","position","responsive","full","onClickOutside","Text","alignSelf","label","primary","Symbol","iterator","toStringTag","KeyPairMap","keyPairMap","Map","keyA","keyB","value","set","clear","get","delete","callbackfn","thisArg","toRefMap","forEach","tempMap","innerMap","outerMap","keys","has","entries","values","lines","key","push","join","UndoablePaintCanvas","dimension","undoBuffer","cellExists","y","getPixelMap","UndoRedoBuffer","clone","addCurrent","undo","setPixelMap","redo","redoOne","undefined","fillColor","startColor","getColorAt","visited","floodFill","cellColor","AreColorsEqual","pixelMap","Error","PaintCanvas","DrawToCanvas","drawToCanvas","AreDimensionsCompatible","image","document","createElement","naturalWidth","naturalHeight","drawImage","setPixelsFromCanvas","xIntervals","yIntervals","mutableMap","data","getImageData","maybeColor","results","Array","elementResult","result","paintCanvas","fillStyle","fillRect","sqrt","touchToCoords","quantX","quantY","currentColor","setColorAt","screenX","changedTouches","clientX","screenY","clientY","rect","target","getBoundingClientRect","clip","clippedX","left","clippedY","top","relativeX","relativeY","getRelativeClickPosition","scaledX","scaledY","floor","colorA","colorB","redoBuffer","maybeTop","getBufferLength","redid","pop","base","maxSize","buffer","maybeReverseState","SaveButton","anchorRef","onShareClick","fullScaleCanvas","drawToHigherResolutionCanvas","Promise","resolve","reject","toBlob","maybeBlob","blob","location","protocol","navigator","share","files","Object","freeze","File","type","canShare","title","catch","error","name","console","debug","toDataURL","href","click","icon","Share","display","download","imageSmoothingEnabled","Footer","onAddButtonClicked","setSettingsMenuShown","gridArea","right","columns","count","align","Actions","Add","labelToValue","valueToLabel","1","8","10","12","14","16","18","20","22","24","options","DimensionPicker","onDimensionChange","Select","placeholder","onChange","option","LoadButton","setLoadedImage","imageName","setImageName","input","imagePromise","imageUrl","URL","createObjectURL","Image","src","onload","accept","NewPageModal","currentDimension","onCreateNew","loadedImage","setDimension","paletteColorDictionary","c64","cga","teletext","paletteNameDictionary","Teletext","PalettePicker","onPaletteChange","possiblePalettes","PaletteModal","setColor","setPinnedColors","setPalette","selectedPalette","onLongPressComplete","duration","onLongPressCancel","timeout","wasLongPress","cancelTimeout","clearTimeout","onPressDown","setTimeout","onPressUp","useLongPress","getButtonIndex","find","pinned","currentPinnedColors","maybeIndex","onTouchStart","isPinned","data-index","Pin","borderRadius","maybeIndexString","dataset","SettingsModal","resetMode","isDarkMode","CheckBox","toggle","checked","DropperIcon","props","StyledIcon","viewBox","a11yTitle","strokeWidth","d","PaletteIcon","xmlns","fillOpacity","cx","cy","HighlightableButton","isHighlighted","boxShadow","ToolsBanner","onBrushChange","onPickerModeClick","onUndoClick","onRedoClick","onPaletteButtonClick","onGridButtonClick","onTrashClick","brush","rows","areas","start","end","Brush","Erase","Paint","History","Undo","Redo","Trash","App","setPixelDimensions","confirmModalParameters","createModal","setBrush","setPickerMode","setGridShown","isPaletteModalShown","setPaletteMenuShown","isNewPageModalShown","setCreateMenuShown","isSettingsMenuShown","darkMode","setDarkMode","paint","useMemo","isConfirmModalShown","Grommet","theme","grommet","themeMode","Header","isPaletteMenuShown","coords","selectedColor","touchEvent","fillWithColor","Main","elevation","maybeLoadedImage","setPixelsFromImage","window","oncontextmenu","preventDefault","stopPropagation","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9b3e2539.chunk.js","sourcesContent":["export class HSLColor {\n  /**\n   * @param hslString A string following the possible forms\n   * hsl(180 100% 50%)\n   * hsl(180deg,100%,50%)\n   * hsl(180deg 100% 50%)\n   * hsl(3.14rad,100%,50%)\n   * hsl(3.14rad 100% 50%)\n   * hsl(0.5turn,100%,50%)\n   * hsl(0.5turn 100% 50%)\n   */\n  static fromHSLString(hslString: string) {\n    let sep = hslString.indexOf(\",\") > -1 ? \",\" : \" \";\n    const hsl = hslString.substr(4).split(\")\")[0].split(sep);\n\n    let hString = hsl[0];\n    let s = parseFloat(hsl[1].substr(0, hsl[1].length - 1)) / 100;\n    let l = parseFloat(hsl[2].substr(0, hsl[2].length - 1)) / 100;\n\n    let h = 0;\n\n    if (hString.indexOf(\"deg\") > -1)\n      hString = hString.substr(0, hString.length - 3);\n    else if (hString.indexOf(\"rad\") > -1)\n      h = Math.round(\n        parseFloat(hString.substr(0, hString.length - 3)) * (180 / Math.PI)\n      );\n    else if (hString.indexOf(\"turn\") > -1)\n      h = Math.round(parseFloat(hString.substr(0, hString.length - 4)) * 360);\n    // Keep hue fraction of 360 if ending up over\n    if (h >= 360) h %= 360;\n\n    return new HSLColor(h, s, l);\n  }\n\n  static fromRGB(r: number, g: number, b: number) {\n    // Make r, g, and b fractions of 1\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    // Find greatest and smallest channel values\n    let cMin = Math.min(r, g, b);\n    let cMax = Math.max(r, g, b);\n    let delta = cMax - cMin;\n    let h = 0;\n    let s = 0;\n    let l = 0;\n\n    // Calculate hue\n    // No difference\n    if (delta === 0) h = 0;\n    // Red is max\n    else if (cMax === r) h = ((g - b) / delta) % 6;\n    // Green is max\n    else if (cMax === g) h = (b - r) / delta + 2;\n    // Blue is max\n    else h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    // Make negative hues positive behind 360°\n    if (h < 0) h += 360;\n\n    // Calculate lightness\n    l = (cMax + cMin) / 2;\n\n    // Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n    return new HSLColor(h, s, l);\n  }\n\n  constructor(hue: number, saturation: number, lightness: number) {\n    this.hsl = [hue, saturation, lightness];\n  }\n\n  hsl: [number, number, number];\n\n  get h() {\n    return this.hsl[0];\n  }\n  get s() {\n    return this.hsl[1];\n  }\n  get l() {\n    return this.hsl[2];\n  }\n\n  set h(h: number) {\n    this.hsl[0] = h;\n  }\n  set s(s: number) {\n    this.hsl[1] = s;\n  }\n  set l(l: number) {\n    this.hsl[2] = l;\n  }\n\n  toHSLString() {\n    const [h, s, l] = this.hsl;\n    return \"hsl(\" + h + \",\" + s * 100 + \"%,\" + l * 100 + \"%)\";\n  }\n\n  toRGB(): RGBColor {\n    return RGBColor.fromHSL(...this.hsl);\n  }\n\n  clone(): HSLColor {\n    return new HSLColor(...this.hsl);\n  }\n}\n\nexport type NoColor = \"NO_COLOR\";\nexport class RGBColor {\n  static readonly NO_COLOR: NoColor = \"NO_COLOR\";\n  /**\n   * @param h Degrees\n   * @param s Percent\n   * @param l Percent\n   */\n\n  static fromHSL(h: number, s: number, l: number) {\n    if (h < 0 || h > 359) {\n      throw new RangeError(\"Hue should be between 0 and 359 inclusive\");\n    }\n    if (s < 0 || s > 1) {\n      throw new RangeError(\n        \"Saturation is a percentage and should be between 0 and 1 inclusive\"\n      );\n    }\n    if (l < 0 || l > 1) {\n      throw new RangeError(\n        \"Lightness is a percentage and should be between 0 and 1 inclusive\"\n      );\n    }\n\n    let c = (1 - Math.abs(2 * l - 1)) * s;\n    let x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n    let m = l - c / 2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (0 <= h && h < 60) {\n      r = c;\n      g = x;\n      b = 0;\n    } else if (60 <= h && h < 120) {\n      r = x;\n      g = c;\n      b = 0;\n    } else if (120 <= h && h < 180) {\n      r = 0;\n      g = c;\n      b = x;\n    } else if (180 <= h && h < 240) {\n      r = 0;\n      g = x;\n      b = c;\n    } else if (240 <= h && h < 300) {\n      r = x;\n      g = 0;\n      b = c;\n    } else if (300 <= h && h < 360) {\n      r = c;\n      g = 0;\n      b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return new RGBColor(r, g, b);\n  }\n\n  /**\n   * @param hex A number between 0-16777215\n   */\n  static fromHex(hex: number) {\n    if (!Number.isInteger(hex))\n      throw new TypeError(`Number should be an integer, got: ${hex}`);\n    if (hex < 0 || hex > (2 ^ 24)) {\n      throw new RangeError(\"Number should be between 0-16777215 inclusive\");\n    }\n\n    const hexString = hex.toString(16);\n\n    return RGBColor.fromHexString(\"#\" + hexString);\n  }\n\n  static fromRGBString(rgbString: string) {\n    let sep = rgbString.indexOf(\",\") > -1 ? \",\" : \" \";\n    const rgbChunks = rgbString.substr(4).split(\")\")[0].split(sep);\n    const rgbValues: number[] = [];\n\n    for (let R in rgbChunks) {\n      let r = rgbChunks[R];\n      if (r.indexOf(\"%\") > -1)\n        rgbValues[R] =\n          Math.round(parseFloat(r.substr(0, r.length - 1)) / 100) * 255;\n    }\n\n    const r = rgbValues[0];\n    const g = rgbValues[1];\n    const b = rgbValues[2];\n\n    return new RGBColor(r, g, b);\n  }\n\n  static fromHexString(hexString: string) {\n    if (hexString.length !== 7) {\n      throw new TypeError(\n        \"Hex string is not 7 characters long. Got: \" + hexString\n      );\n    }\n\n    if (hexString[0] !== \"#\") {\n      throw new TypeError(\n        \"Hex color string should start with #. Got: \" + hexString[0]\n      );\n    }\n\n    const r = parseInt(\"0x\" + hexString[1] + hexString[2], 16);\n    const g = parseInt(\"0x\" + hexString[3] + hexString[4], 16);\n    const b = parseInt(\"0x\" + hexString[5] + hexString[6], 16);\n\n    return new RGBColor(r, g, b);\n  }\n\n  constructor(red: number, green: number, blue: number) {\n    this.rgb = [red, green, blue];\n  }\n\n  rgb: [number, number, number];\n\n  get r() {\n    return this.rgb[0];\n  }\n  get g() {\n    return this.rgb[1];\n  }\n  get b() {\n    return this.rgb[2];\n  }\n\n  set r(r: number) {\n    this.rgb[0] = r;\n  }\n  set g(g: number) {\n    this.rgb[1] = g;\n  }\n  set b(b: number) {\n    this.rgb[2] = b;\n  }\n\n  static Equals(a: RGBColor, b: RGBColor) {\n    const [r1, g1, b1] = a.rgb;\n    const [r2, g2, b2] = b.rgb;\n\n    return r1 === r2 && g1 === g2 && b1 === b2;\n  }\n\n  toHex() {\n    const [r, g, b] = this.rgb;\n    let rString = r.toString(16);\n    let gString = g.toString(16);\n    let bString = b.toString(16);\n\n    if (rString.length === 1) rString = \"0\" + rString;\n    if (gString.length === 1) gString = \"0\" + gString;\n    if (bString.length === 1) bString = \"0\" + bString;\n\n    return \"#\" + rString + gString + bString;\n  }\n\n  toHSL(): HSLColor {\n    return HSLColor.fromRGB(...this.rgb);\n  }\n}\n","import { Box, Button } from \"grommet\";\nimport { useEffect } from \"react\";\nimport { RGBColor } from \"../drivers/Color\";\n\nexport const ColorPickerHistory = ({\n  colorSelected,\n  onColorPicked,\n  colorHistory,\n  setColorHistory,\n}: {\n  setColorHistory: (history: RGBColor[]) => void;\n  colorHistory: RGBColor[];\n  colorSelected: RGBColor;\n  onColorPicked: (color: RGBColor) => void;\n}) => {\n  useEffect(() => {\n    if (\n      colorHistory.filter((color) => {\n        return RGBColor.Equals(color, colorSelected);\n      }).length !== 0\n    ) {\n      return;\n    }\n\n    let newColorHistory = [...colorHistory];\n    newColorHistory.unshift(colorSelected);\n    if (newColorHistory.length > 8) {\n      newColorHistory = newColorHistory.slice(0, 8);\n    }\n\n    setColorHistory(newColorHistory);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [colorSelected]);\n\n  return (\n    <Box\n      className=\"ColorPickerHistory\"\n      direction=\"row\"\n      justify=\"start\"\n      wrap\n      gap=\"xxsmall\"\n    >\n      {colorHistory.map((color, index) => (\n        <Box\n          key={color.toHex()}\n          height=\"xxsmall\"\n          width=\"xxsmall\"\n          pad={{ bottom: \"xsmall\" }}\n        >\n          <Button\n            fill=\"vertical\"\n            size=\"small\"\n            onClick={() => onColorPicked(color)}\n            key={index}\n            style={{\n              backgroundColor: color.toHex(),\n              border: \"none\",\n            }}\n          ></Button>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","import { Box, Button } from \"grommet\";\nimport { RGBColor } from \"../drivers/Color\";\n\nexport const PinnedColors = ({\n  pinnedColors = [],\n  onColorPicked,\n}: {\n  pinnedColors: RGBColor[];\n  onColorPicked: (color: RGBColor) => void;\n}) => {\n  return (\n    <Box\n      className=\"ColorPickerHistory\"\n      direction=\"row\"\n      justify=\"start\"\n      wrap\n      gap=\"xxsmall\"\n    >\n      {pinnedColors.slice(0, 8).map((color, index) => (\n        <Box\n          key={color.toHex()}\n          height=\"xxsmall\"\n          width=\"xxsmall\"\n          pad={{ bottom: \"xsmall\" }}\n        >\n          <Button\n            fill=\"vertical\"\n            size=\"small\"\n            onClick={() => onColorPicked(color)}\n            key={index}\n            style={{\n              backgroundColor: color.toHex(),\n              border: \"none\",\n            }}\n          ></Button>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","import { ColorPickerHistory } from \"./components/ColorPickerHistory\";\nimport { PinnedColors } from \"./components/PinnedColors\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { AvailablePalettes } from \"./PaletteDictionary\";\n\n/** TODO: Make a component that displays a list of colors.\n * Use logic here to decide which colors to show.\n * Probably remove ColorPickerHistory and PinnedColors and combine into here */\nexport const BodyColorPicker = ({\n  setColorAndTurnOffPicker,\n  color,\n  palette,\n  pickerMode,\n  pinnedColors,\n  colorHistory,\n  setColorHistory,\n}: {\n  pickerMode: \"history\" | \"pinned\";\n  setColorHistory: (history: RGBColor[]) => void;\n  setColorAndTurnOffPicker: (color: RGBColor) => void;\n  color: RGBColor;\n  palette: AvailablePalettes;\n  pinnedColors: RGBColor[];\n  colorHistory: RGBColor[];\n}) => {\n  if (pickerMode === \"history\") {\n    return (\n      <ColorPickerHistory\n        setColorHistory={setColorHistory}\n        colorHistory={colorHistory}\n        onColorPicked={setColorAndTurnOffPicker}\n        colorSelected={color}\n      />\n    );\n  } else {\n    return (\n      <PinnedColors\n        onColorPicked={setColorAndTurnOffPicker}\n        pinnedColors={pinnedColors}\n      />\n    );\n  }\n};\n","import { TouchEvent, useEffect, useRef } from \"react\";\nimport \"../styles/CanvasContainer.css\";\n\nexport const CanvasContainer = ({\n  onCanvasCreated,\n  onTouchEvent,\n  pixelDimensions,\n}: {\n  pixelDimensions: number;\n  onCanvasCreated: (canvas: HTMLCanvasElement) => void;\n  onTouchEvent: (\n    canvas: HTMLCanvasElement,\n    touchEvent: TouchEvent<HTMLCanvasElement>\n  ) => void;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      onCanvasCreated(canvas);\n    }\n  }, [onCanvasCreated]);\n\n  const onInnerTouchEvent = (event: TouchEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    onTouchEvent(canvas, event);\n  };\n\n  return (\n    <canvas\n      className=\"CanvasContainer\"\n      style={{\n        backgroundSize: `${100 / pixelDimensions / 2}%`,\n      }}\n      ref={canvasRef}\n      width={pixelDimensions}\n      height={pixelDimensions}\n      onTouchEnd={onInnerTouchEvent}\n      onTouchMove={onInnerTouchEvent}\n    />\n  );\n};\n","import { useEffect, useRef } from \"react\";\nimport \"../styles/Grid.css\";\n\nexport const Grid = ({\n  pixelDimensions,\n  rootCanvas,\n}: {\n  pixelDimensions: number;\n  rootCanvas: HTMLCanvasElement;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n\n    if (!context || !canvas) return;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.strokeStyle = \"lightgrey\";\n    context.lineWidth = 1;\n    const xIncrement = canvas.width / pixelDimensions;\n    for (let xIndex = 0; xIndex < pixelDimensions; xIndex++) {\n      context.moveTo(Math.round(xIndex * xIncrement), 0);\n      context.lineTo(Math.round(xIndex * xIncrement), canvas.height);\n      context.stroke();\n    }\n\n    // Horizontal lines\n    const yIncrement = canvas.height / pixelDimensions;\n    for (let yIndex = 0; yIndex < pixelDimensions; yIndex++) {\n      context.moveTo(0, Math.round(yIndex * yIncrement));\n      context.lineTo(canvas.width, Math.round(yIndex * yIncrement));\n      context.stroke();\n    }\n\n    return () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n  });\n  return (\n    <canvas\n      ref={canvasRef}\n      key={pixelDimensions}\n      className=\"Grid\"\n      width={rootCanvas.clientWidth}\n      height={rootCanvas.clientHeight}\n    />\n  );\n};\n","import { Stack, StackProps } from \"grommet\";\nimport { useState } from \"react\";\nimport { CanvasContainer } from \"./components/CanvasContainer\";\nimport { ValidDimensions } from \"./components/DimensionPicker\";\nimport { Grid } from \"./components/Grid\";\nexport const CanvasStack = ({\n  isGridShown,\n  pixelDimensions,\n  onCanvasCreated,\n  onCanvasTouch,\n  stackProps,\n}: {\n  isPaletteMenuShown: boolean;\n  isGridShown: boolean;\n  pixelDimensions: ValidDimensions;\n  onCanvasCreated: (canvas: HTMLCanvasElement) => void;\n  onCanvasTouch: (\n    canvas: HTMLCanvasElement,\n    event: React.TouchEvent<HTMLCanvasElement>\n  ) => void;\n  stackProps: StackProps;\n}) => {\n  const [canvas, setCanvas] = useState<HTMLCanvasElement>();\n  return (\n    <Stack {...stackProps}>\n      <CanvasContainer\n        onCanvasCreated={(canvas) => {\n          setCanvas(canvas);\n          onCanvasCreated(canvas);\n        }}\n        pixelDimensions={pixelDimensions}\n        onTouchEvent={onCanvasTouch}\n      />\n\n      {canvas && isGridShown && (\n        <Grid pixelDimensions={pixelDimensions} rootCanvas={canvas} />\n      )}\n    </Stack>\n  );\n};\n","import { Box, Button, Layer, Text } from \"grommet\";\nimport React from \"react\";\n\nexport type ConfirmModalProps = {\n  onAccept: () => void;\n  onCancel?: () => void;\n  message?: string;\n  acceptButtonText?: string;\n  cancelButtonText?: string;\n};\n\nexport const ConfirmModal = ({\n  onAccept,\n  onCancel,\n  message = \"Are you sure?\",\n  cancelButtonText = \"Cancel\",\n  acceptButtonText = \"Accept\",\n}: ConfirmModalProps) => {\n  return (\n    <Layer\n      modal\n      position=\"center\"\n      responsive={false}\n      full=\"horizontal\"\n      onClickOutside={onCancel}\n    >\n      <Box gap=\"small\" pad=\"small\">\n        <Text alignSelf=\"center\">{message}</Text>\n        <Box direction=\"row\" justify=\"between\" gap=\"small\">\n          <Button\n            label={cancelButtonText}\n            onClick={onCancel}\n            alignSelf=\"start\"\n          />\n          <Button\n            primary\n            label={acceptButtonText}\n            onClick={onAccept}\n            alignSelf=\"end\"\n          />\n        </Box>\n      </Box>\n    </Layer>\n  );\n};\n","import { NoColor, RGBColor } from \"./Color\";\nimport { getRelativeClickPosition } from \"./getRelativeClickPosition\";\n\nexport class KeyPairMap<KeyA, KeyB, Value> implements Map<[KeyA, KeyB], Value> {\n  constructor(keyPairMap?: KeyPairMap<KeyA, KeyB, Value>) {\n    if (!keyPairMap) return;\n\n    for (let [[keyA, keyB], value] of keyPairMap) {\n      this.set([keyA, keyB], value);\n    }\n  }\n\n  private map = new Map<KeyA, Map<KeyB, Value>>();\n\n  clear(): void {\n    this.map.clear();\n  }\n\n  delete([keyA, keyB]: [KeyA, KeyB]): boolean {\n    return this.map.get(keyA)?.delete(keyB) || false;\n  }\n\n  clone(): KeyPairMap<KeyA, KeyB, Value> {\n    return new KeyPairMap(this);\n  }\n\n  forEach(\n    callbackfn: (\n      value: Value,\n      key: [KeyA, KeyB],\n      map: Map<[KeyA, KeyB], Value>\n    ) => void,\n    thisArg?: any\n  ): void {\n    const refMap = this.toRefMap();\n\n    refMap.forEach(callbackfn, thisArg);\n  }\n\n  private toRefMap() {\n    const tempMap = new Map<[KeyA, KeyB], Value>();\n    this.map.forEach((innerMap, keyA, outerMap) => {\n      innerMap.forEach((value, keyB, innerMap) => {\n        const keys = [keyA, keyB] as [KeyA, KeyB];\n        tempMap.set(keys, value);\n      });\n    });\n    return tempMap;\n  }\n\n  get([keyA, keyB]: [KeyA, KeyB]): Value | undefined {\n    return this.map.get(keyA)?.get(keyB);\n  }\n\n  has([keyA, keyB]: [KeyA, KeyB]): boolean {\n    return this.map.get(keyA)?.has(keyB) || false;\n  }\n\n  set([keyA, keyB]: [KeyA, KeyB], value: Value): this {\n    const hasKeyA = this.map.has(keyA);\n\n    if (!hasKeyA) {\n      this.map.set(keyA, new Map());\n    }\n    this.map.get(keyA)!.set(keyB, value);\n\n    return this;\n  }\n\n  get size() {\n    return this.toRefMap().size;\n  }\n\n  [Symbol.iterator](): IterableIterator<[[KeyA, KeyB], Value]> {\n    return this.toRefMap()[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[[KeyA, KeyB], Value]> {\n    return this.toRefMap().entries();\n  }\n\n  keys(): IterableIterator<[KeyA, KeyB]> {\n    return this.toRefMap().keys();\n  }\n\n  values(): IterableIterator<Value> {\n    return this.toRefMap().values();\n  }\n\n  toString(): string {\n    let lines = [];\n\n    for (let [key, value] of this) {\n      lines.push(`${key[0]}, ${key[1]}, ${value}`);\n    }\n\n    return lines.join(\"\\n\");\n  }\n  [Symbol.toStringTag]: string;\n}\n\nexport class PaintCanvas {\n  static DrawToCanvas(paintCanvas: PaintCanvas, canvas: HTMLCanvasElement) {\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n    paintCanvas.forEach(([x, y], color) => {\n      if (color === RGBColor.NO_COLOR) {\n        context.clearRect(x, y, 1, 1);\n        return;\n      }\n\n      context.fillStyle = color.toHex();\n      context.fillRect(x, y, 1, 1);\n    });\n  }\n\n  static AreDimensionsCompatible(\n    paintCanvas: PaintCanvas,\n    canvas: HTMLCanvasElement\n  ) {\n    const { width, height } = canvas;\n    const dimension = paintCanvas.dimension();\n\n    if (width !== height) {\n      return false;\n    }\n\n    if (dimension !== width) {\n      return false;\n    }\n\n    return true;\n  }\n\n  drawToCanvas() {\n    if (this.canvas === undefined) {\n      throw new Error(\"Cannot draw to canvas, no canvas set\");\n    }\n\n    PaintCanvas.DrawToCanvas(this, this.canvas);\n  }\n\n  tryDrawToCanvas(): boolean {\n    try {\n      this.drawToCanvas();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  setCanvas(canvas: HTMLCanvasElement) {\n    if (!PaintCanvas.AreDimensionsCompatible(this, canvas)) {\n      throw new RangeError(\n        `PaintCanvas and HTMLCanvas should be square and the same dimensions. Got PaintCanvas: ${this.dimension()} canvas: ${\n          canvas.width\n        }x${canvas.height}`\n      );\n    }\n\n    this.canvas = canvas;\n  }\n\n  hasCanvas(): boolean {\n    return this.canvas !== undefined;\n  }\n\n  getCanvas(): HTMLCanvasElement | undefined {\n    return this.canvas;\n  }\n\n  private pixelMap = new KeyPairMap<number, number, RGBColor | NoColor>();\n\n  getPixelMap() {\n    return this.pixelMap;\n  }\n\n  setPixelMap(map: KeyPairMap<number, number, RGBColor | \"NO_COLOR\">) {\n    if (map.size !== this.pixelMap.size) {\n      throw new RangeError(\n        \"Cannot set pixel map. Pixel maps are not the same dimensions\"\n      );\n    }\n    this.pixelMap = map.clone();\n  }\n\n  setPixelsFromImage(image: HTMLImageElement) {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n\n    canvas.width = image.naturalWidth;\n    canvas.height = image.naturalHeight;\n    context.drawImage(image, 0, 0);\n\n    this.setPixelsFromCanvas(canvas);\n  }\n\n  setPixelsFromCanvas(canvas: HTMLCanvasElement) {\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n\n    const xIntervals = canvas.width / this.dimension();\n    const yIntervals = canvas.height / this.dimension();\n    this.mutableMap(([x, y]) => {\n      const { data } = context.getImageData(\n        x * xIntervals,\n        y * yIntervals,\n        1,\n        1\n      );\n\n      const [r, g, b, a] = data;\n      const color = a === 0 ? RGBColor.NO_COLOR : new RGBColor(r, g, b);\n      return color;\n    });\n  }\n\n  clear() {\n    this.mutableMap(() => RGBColor.NO_COLOR);\n  }\n\n  setColorAt(x: number, y: number, color: RGBColor | NoColor) {\n    const isPixelInRange = this.pixelMap.has([x, y]);\n\n    if (!isPixelInRange) {\n      throw RangeError(`Pixel at ${x},${y} does not exist`);\n    }\n\n    this.pixelMap.set([x, y], color);\n  }\n\n  getColorAt(x: number, y: number): RGBColor | NoColor {\n    const maybeColor = this.pixelMap.get([x, y]);\n\n    if (maybeColor === undefined)\n      throw RangeError(`Pixel at ${x},${y} does not exist`);\n\n    return maybeColor;\n  }\n\n  map<T>(\n    callbackfn: (coord: [x: number, y: number], color: RGBColor | NoColor) => T\n  ): T[] {\n    const results = new Array<T>();\n    for (let [key, value] of this.pixelMap.entries()) {\n      const elementResult = callbackfn(key, value);\n      results.push(elementResult);\n    }\n\n    return results;\n  }\n\n  mutableMap(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => RGBColor | NoColor\n  ) {\n    for (let [key, value] of this.pixelMap.entries()) {\n      const result = callbackfn(key, value);\n      this.pixelMap.set(key, result);\n    }\n  }\n\n  forEach(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => void\n  ) {\n    for (let [key, value] of this.pixelMap.entries()) {\n      callbackfn(key, value);\n    }\n  }\n  private canvas?: HTMLCanvasElement;\n\n  constructor(dimension: number) {\n    for (let x = 0; x < dimension; x++) {\n      for (let y = 0; y < dimension; y++) {\n        const keys = [x, y] as [number, number];\n        const color = RGBColor.NO_COLOR;\n        this.pixelMap.set(keys, color);\n      }\n    }\n  }\n\n  dimension(): number {\n    return Math.sqrt(this.pixelMap.size);\n  }\n\n  touchEvent(event: React.TouchEvent<HTMLElement>, color: RGBColor | NoColor) {\n    const { quantX, quantY } = this.touchToCoords(event);\n\n    const currentColor = this.getColorAt(quantX, quantY);\n\n    if (color === \"NO_COLOR\" && currentColor === \"NO_COLOR\") {\n      return;\n    }\n\n    if (color === \"NO_COLOR\" && currentColor !== \"NO_COLOR\") {\n      this.setColorAt(quantX, quantY, color);\n      return;\n    }\n\n    if (color !== \"NO_COLOR\" && currentColor === \"NO_COLOR\") {\n      this.setColorAt(quantX, quantY, color);\n      return;\n    }\n\n    if (color !== \"NO_COLOR\" && currentColor !== \"NO_COLOR\") {\n      if (!RGBColor.Equals(color, currentColor)) {\n        this.setColorAt(quantX, quantY, color);\n      }\n    }\n  }\n\n  touchToCoords(event: React.TouchEvent<HTMLElement>) {\n    const { relativeX, relativeY } = getRelativeClickPosition(event);\n    const scaledX = relativeX * this.dimension();\n    const scaledY = relativeY * this.dimension();\n    const quantX = Math.floor(scaledX);\n    const quantY = Math.floor(scaledY);\n    return { quantX, quantY };\n  }\n}\nexport class UndoablePaintCanvas extends PaintCanvas {\n  static AreColorsEqual = (\n    colorA: RGBColor | NoColor,\n    colorB: RGBColor | NoColor\n  ) => {\n    if (colorA === \"NO_COLOR\" && colorB === \"NO_COLOR\") {\n      return true;\n    }\n\n    if (colorA === \"NO_COLOR\" && colorB !== \"NO_COLOR\") {\n      return false;\n    }\n\n    if (colorA !== \"NO_COLOR\" && colorB === \"NO_COLOR\") {\n      return false;\n    }\n\n    if (colorA !== \"NO_COLOR\" && colorB !== \"NO_COLOR\") {\n      if (RGBColor.Equals(colorA, colorB)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  undoBuffer: UndoRedoBuffer<KeyPairMap<number, number, RGBColor | \"NO_COLOR\">>;\n  constructor(dimension: number) {\n    super(dimension);\n\n    this.undoBuffer = new UndoRedoBuffer<\n      KeyPairMap<number, number, RGBColor | NoColor>\n    >(this.getPixelMap().clone());\n  }\n\n  mutableMap(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => RGBColor | NoColor\n  ) {\n    super.mutableMap(callbackfn);\n    this.undoBuffer.addCurrent(this.getPixelMap().clone());\n  }\n\n  setColorAt(x: number, y: number, color: RGBColor | NoColor) {\n    super.setColorAt(x, y, color);\n    this.undoBuffer.addCurrent(this.getPixelMap().clone());\n  }\n\n  undo() {\n    const undo = this.undoBuffer.undo();\n    this.setPixelMap(undo);\n  }\n\n  redo() {\n    const redo = this.undoBuffer.redoOne();\n    if (redo !== undefined) {\n      this.setPixelMap(redo);\n    }\n  }\n\n  fillWithColor(x: number, y: number, fillColor: RGBColor | NoColor) {\n    const startColor = this.getColorAt(x, y);\n\n    const visited = new KeyPairMap<number, number, boolean>();\n    this.getPixelMap()\n      .clone()\n      .forEach((color, [x, y]) => {\n        visited.set([x, y], false);\n      });\n\n    this.floodFill(x, y, fillColor, startColor, visited);\n    this.undoBuffer.addCurrent(this.getPixelMap().clone());\n  }\n\n  private floodFill(\n    x: number,\n    y: number,\n    fillColor: RGBColor | NoColor,\n    startColor: RGBColor | NoColor,\n    visited: KeyPairMap<number, number, boolean>\n  ) {\n    if (!this.cellExists(x, y)) return;\n    if (visited.get([x, y]) === true) return;\n\n    const cellColor = this.getColorAt(x, y);\n    if (!UndoablePaintCanvas.AreColorsEqual(cellColor, startColor)) return;\n\n    super.setColorAt(x, y, fillColor);\n    visited.set([x, y], true);\n\n    if (visited.get([x, y + 1]) === false)\n      this.floodFill(x, y + 1, fillColor, startColor, visited);\n\n    if (visited.get([x, y - 1]) === false)\n      this.floodFill(x, y - 1, fillColor, startColor, visited);\n\n    if (visited.get([x + 1, y]) === false)\n      this.floodFill(x + 1, y, fillColor, startColor, visited);\n\n    if (visited.get([x - 1, y]) === false)\n      this.floodFill(x - 1, y, fillColor, startColor, visited);\n  }\n\n  private cellExists = (x: number, y: number) => this.getPixelMap().has([x, y]);\n}\n\nexport class UndoBuffer<T> {\n  buffer: T[];\n\n  constructor(private base: T, private maxSize?: number) {\n    this.buffer = [base];\n  }\n\n  top() {\n    return this.buffer[this.buffer.length - 1] as T | undefined;\n  }\n\n  undo() {\n    this.buffer.pop();\n    const maybeReverseState = this.buffer[this.buffer.length - 1] as\n      | T\n      | undefined;\n    if (maybeReverseState) {\n      return maybeReverseState;\n    } else {\n      this.buffer = [this.base];\n      return this.base;\n    }\n  }\n\n  addCurrent(value: T) {\n    this.buffer.push(value);\n\n    if (this.maxSize && this.maxSize < this.buffer.length) {\n      this.buffer = this.buffer.slice(-this.maxSize - 2);\n    }\n  }\n\n  getUndoSize() {\n    return Math.max(this.buffer.length - 2, 0);\n  }\n\n  getBufferLength() {\n    return this.buffer.length;\n  }\n\n  clear() {\n    this.buffer = [];\n  }\n}\n\nexport class UndoRedoBuffer<T> extends UndoBuffer<T> {\n  private redoBuffer = new Array<T>();\n\n  undo(): T {\n    const maybeTop = this.top();\n    if (maybeTop !== undefined && this.getBufferLength() > 1) {\n      this.redoBuffer.push(maybeTop);\n    }\n\n    const previousPoint = super.undo();\n    return previousPoint;\n  }\n\n  addCurrent(value: T) {\n    this.redoBuffer = [];\n    super.addCurrent(value);\n  }\n\n  getUndoSize() {\n    return super.getUndoSize();\n  }\n\n  getRedoSize() {\n    return this.redoBuffer.length;\n  }\n\n  redoOne(): T | undefined {\n    const redid = this.redoBuffer.pop();\n    if (redid !== undefined) {\n      super.addCurrent(redid);\n    }\n\n    return redid;\n  }\n\n  clear() {\n    this.redoBuffer = [];\n    super.clear();\n  }\n}\n","import { TouchEvent } from \"react\";\n\nexport function getRelativeClickPosition(\n  event: TouchEvent<HTMLElement>\n): { relativeX: number; relativeY: number } {\n  const screenX = event.changedTouches[0].clientX;\n  const screenY = event.changedTouches[0].clientY;\n  const rect = (event.target as HTMLElement).getBoundingClientRect();\n\n  const clip = (value: number, min: number, max: number) =>\n    Math.min(max, Math.max(value, min));\n\n  const clippedX = clip(screenX - rect.left, 0, rect.width - 1);\n  const clippedY = clip(screenY - rect.top, 0, rect.height - 1);\n\n  const relativeX = clippedX / rect.width;\n  const relativeY = clippedY / rect.height;\n  return { relativeX: relativeX, relativeY: relativeY };\n}\n","/* eslint-disable jsx-a11y/anchor-has-content */\nimport { Button } from \"grommet\";\nimport { Share } from \"grommet-icons\";\nimport { useRef } from \"react\";\n\nexport const SaveButton = ({ canvas }: { canvas: HTMLCanvasElement }) => {\n  const anchorRef = useRef<HTMLAnchorElement>(null);\n  const onShareClick = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    const fullScaleCanvas = drawToHigherResolutionCanvas(canvas);\n\n    try {\n      const blob = await new Promise<Blob>((resolve, reject) => {\n        fullScaleCanvas.toBlob((maybeBlob) => {\n          if (maybeBlob) {\n            resolve(maybeBlob);\n          } else {\n            reject(new Error(\"Unable to convert canvas to blob\"));\n          }\n        }, \"image/png\");\n      });\n\n      if (document.location.protocol !== \"https:\") {\n        throw new Error(\"Could not share. Page is not HTTPS.\");\n      }\n\n      if (navigator.share === undefined) {\n        throw new Error(\"Share unsupported in this browser\");\n      }\n\n      const files = Object.freeze([\n        new File([blob], \"my-pixel-art.png\", { type: blob.type }),\n      ]);\n\n      if (!(navigator.canShare && navigator.canShare({ files }))) {\n        throw new Error(\"File sharing unsupported in this browser\");\n      }\n\n      await navigator\n        .share({\n          title: \"My pixel art\",\n          files,\n        })\n        .catch((error: Error) => {\n          if (error.name === \"AbortError\") {\n            console.debug(\"User cancelled share\");\n            return;\n          }\n          throw error;\n        });\n    } catch (error) {\n      console.debug(\"Could not use share api, using image download\");\n      console.debug(error);\n      const image = fullScaleCanvas.toDataURL(\"image/png\");\n      if (anchorRef.current) {\n        anchorRef.current.href = image;\n        anchorRef.current.click();\n      }\n    }\n  };\n  return (\n    <>\n      <Button icon={<Share />} onClick={onShareClick} />\n      <a\n        ref={anchorRef}\n        href=\"/\"\n        style={{ display: \"none\" }}\n        download=\"my-pixel-art.png\"\n      />\n    </>\n  );\n};\n\nfunction drawToHigherResolutionCanvas(canvas: HTMLCanvasElement) {\n  const fullScaleCanvas = document.createElement(\"canvas\");\n  fullScaleCanvas.width = 1024;\n  fullScaleCanvas.height = 1024;\n  const context = fullScaleCanvas.getContext(\"2d\")!;\n  context.imageSmoothingEnabled = false;\n  context.drawImage(\n    canvas,\n    0,\n    0,\n    fullScaleCanvas.width,\n    fullScaleCanvas.height\n  );\n  return fullScaleCanvas;\n}\n","import { Box, Grid, Button } from \"grommet\";\nimport { Actions, Add } from \"grommet-icons\";\nimport { SaveButton } from \"./components/SaveButton\";\nexport const Footer = ({\n  canvas,\n  onAddButtonClicked,\n  setSettingsMenuShown,\n  gridArea,\n}: {\n  canvas: HTMLCanvasElement;\n  onAddButtonClicked: () => void;\n  setSettingsMenuShown: (value: boolean) => void;\n} & { gridArea: string }) => {\n  return (\n    <Box gridArea={gridArea} pad={{ left: \"small\", right: \"small\" }}>\n      <Grid\n        columns={{\n          count: 3,\n          size: [\"auto\", \"auto\", \"auto\"],\n        }}\n        fill\n        gap=\"small\"\n      >\n        <Box align=\"start\">\n          <Button\n            icon={<Actions />}\n            onClick={() => setSettingsMenuShown(true)}\n          />\n        </Box>\n        <Box align=\"center\">\n          <Button icon={<Add />} onClick={onAddButtonClicked} />\n        </Box>\n        <Box align=\"end\">{<SaveButton canvas={canvas} />}</Box>\n      </Grid>\n    </Box>\n  );\n};\n","import { Select } from \"grommet\";\nimport { ReactElement } from \"react\";\n\nconst validDimensions = [\n  { value: 1, label: \"1x1\" },\n  { value: 8, label: \"8x8\" },\n  { value: 10, label: \"10x10\" },\n  { value: 12, label: \"12x12\" },\n  { value: 14, label: \"14x14\" },\n  { value: 16, label: \"16x16\" },\n  { value: 18, label: \"18x18\" },\n  { value: 20, label: \"20x20\" },\n  { value: 22, label: \"22x22\" },\n  { value: 24, label: \"24x24\" },\n] as const;\n\nconst labelToValue = {\n  \"1x1\": 1,\n  \"8x8\": 8,\n  \"10x10\": 10,\n  \"12x12\": 12,\n  \"14x14\": 14,\n  \"16x16\": 16,\n  \"18x18\": 18,\n  \"20x20\": 20,\n  \"22x22\": 22,\n  \"24x24\": 24,\n} as const;\n\nconst valueToLabel = {\n  1: \"1x1\",\n  8: \"8x8\",\n  10: \"10x10\",\n  12: \"12x12\",\n  14: \"14x14\",\n  16: \"16x16\",\n  18: \"18x18\",\n  20: \"20x20\",\n  22: \"22x22\",\n  24: \"24x24\",\n} as const;\n\nconst options = [\n  \"1x1\",\n  \"8x8\",\n  \"10x10\",\n  \"12x12\",\n  \"14x14\",\n  \"16x16\",\n  \"18x18\",\n  \"20x20\",\n  \"22x22\",\n  \"24x24\",\n];\n\nexport type ValidDimensions = typeof validDimensions[number][\"value\"];\n\nexport const DimensionPicker = ({\n  dimension,\n  onDimensionChange,\n}: {\n  dimension: ValidDimensions;\n  onDimensionChange: (dimension: ValidDimensions) => void;\n}): ReactElement => {\n  return (\n    <Select\n      name=\"Select Dimensions\"\n      placeholder=\"8x8\"\n      value={valueToLabel[dimension]}\n      options={options}\n      onChange={({ option }: { option: keyof typeof labelToValue }) =>\n        onDimensionChange(labelToValue[option])\n      }\n    />\n  );\n};\n","import { Box, Button, Text } from \"grommet\";\nimport { useRef, useState } from \"react\";\n\nexport const LoadButton = ({\n  setLoadedImage,\n}: {\n  setLoadedImage: (image: HTMLImageElement) => void;\n}) => {\n  const ref = useRef<HTMLInputElement>(null);\n  const [imageName, setImageName] = useState(\"No File Chosen\");\n  return (\n    <Box direction=\"row\" gap=\"small\">\n      <Button\n        label=\"Choose File\"\n        onClick={() => {\n          const input = ref.current;\n          if (!input) return;\n          input.click();\n        }}\n      />\n      <Text\n        alignSelf=\"center\"\n        onClick={() => {\n          const input = ref.current;\n          if (!input) return;\n          input.click();\n        }}\n      >\n        {imageName}\n      </Text>\n      <input\n        ref={ref}\n        style={{ display: \"none\" }}\n        onChange={async (event) => {\n          const imagePromise = new Promise<HTMLImageElement>(\n            (resolve, reject) => {\n              if (!event.target.files || !event.target.files[0]) return;\n              const imageUrl = URL.createObjectURL(event.target.files![0]);\n              const image = new Image();\n              image.src = imageUrl;\n              image.onload = () => resolve(image);\n            }\n          );\n          const image = await imagePromise;\n          setImageName(event.target.files?.[0]?.name || \"No File Chosen\");\n          setLoadedImage(image);\n        }}\n        type=\"file\"\n        accept=\"image/*\"\n      />\n    </Box>\n  );\n};\n","import { Layer, Box, Button, Grid, Text } from \"grommet\";\nimport React, { useEffect, useState } from \"react\";\nimport { DimensionPicker, ValidDimensions } from \"./components/DimensionPicker\";\nimport { LoadButton } from \"./components/LoadButton\";\n\nexport const NewPageModal = ({\n  currentDimension,\n  onCancel,\n  onCreateNew,\n}: {\n  currentDimension: ValidDimensions;\n  onCancel: () => void;\n  onCreateNew: (\n    dimension: ValidDimensions,\n    loadedImage?: HTMLImageElement\n  ) => void;\n}) => {\n  const [loadedImage, setLoadedImage] = useState<HTMLImageElement>();\n  const [dimension, setDimension] = useState<ValidDimensions>(currentDimension);\n\n  useEffect(() => {\n    setDimension(currentDimension);\n  }, [currentDimension]);\n\n  return (\n    <Layer\n      modal\n      position=\"bottom\"\n      responsive={false}\n      full=\"horizontal\"\n      onClickOutside={onCancel}\n    >\n      <Box pad=\"small\" fill>\n        <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n          <Text>Canvas Dimensions</Text>\n          <DimensionPicker\n            onDimensionChange={setDimension}\n            dimension={dimension}\n          />\n        </Box>\n        <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n          <Text>Upload Image (optional)</Text>\n          <LoadButton setLoadedImage={setLoadedImage} />\n        </Box>\n\n        <Grid\n          columns={{ count: 2, size: [\"auto\", \"auto\"] }}\n          gap=\"small\"\n          pad={{ top: \"medium\", bottom: \"small\" }}\n        >\n          <Button label=\"Cancel\" onClick={onCancel} />\n\n          <Button\n            primary\n            label=\"Create New\"\n            onClick={() => onCreateNew(dimension, loadedImage)}\n          />\n        </Grid>\n      </Box>\n    </Layer>\n  );\n};\n","export const paletteColorDictionary: {\n  [key: string]: string[];\n} = {\n  c64: [\n    \"#000000\",\n    \"#FFFFFF\",\n    \"#880000\",\n    \"#AAFFEE\",\n    \"#DD8855\",\n    \"#664400\",\n    \"#FF7777\",\n    \"#333333\",\n    \"#CC44CC\",\n    \"#00CC55\",\n    \"#0000AA\",\n    \"#EEEE77\",\n    \"#777777\",\n    \"#AAFF66\",\n    \"#0088FF\",\n    \"#BBBBBB\",\n  ],\n  cga: [\n    \"#000000\",\n    \"#0000AA\",\n    \"#00AA00\",\n    \"#00AAAA\",\n    \"#555555\",\n    \"#5555FF\",\n    \"#55FF55\",\n    \"#55FFFF\",\n    \"#AA0000\",\n    \"#AA00AA\",\n    \"#AA5500\",\n    \"#AAAAAA\",\n    \"#FF5555\",\n    \"#FF55FF\",\n    \"#FFFF55\",\n    \"#FFFFFF\",\n  ],\n  teletext: [\n    \"#000000\",\n    \"#ff0000\",\n    \"#ffff00\",\n    \"#00ff00\",\n    \"#00ffff\",\n    \"#0000ff\",\n    \"#ff00ff\",\n    \"#ffffff\",\n  ],\n};\n\nexport const paletteNameDictionary = {\n  c64: \"Commodore 64\",\n  cga: \"DOS CGA/ EGA\",\n  teletext: \"Teletext\",\n} as const;\n\nexport type AvailablePalettes = keyof typeof paletteNameDictionary;\n","import { Select } from \"grommet\";\nimport { ReactElement } from \"react\";\nimport { AvailablePalettes, paletteNameDictionary } from \"./PaletteDictionary\";\n\nconst options = [\"Commodore 64\", \"DOS CGA/ EGA\", \"Teletext\"];\n\nconst labelToValue = {\n  \"Commodore 64\": \"c64\",\n  \"DOS CGA/ EGA\": \"cga\",\n  Teletext: \"teletext\",\n} as const;\n\nexport const PalettePicker = ({\n  palette,\n  onPaletteChange,\n}: {\n  palette: AvailablePalettes;\n  onPaletteChange: (palette: AvailablePalettes) => void;\n}): ReactElement => {\n  const possiblePalettes = paletteNameDictionary;\n  return (\n    <Select\n      name=\"Select Palette\"\n      placeholder={possiblePalettes.c64}\n      value={paletteNameDictionary[palette]}\n      options={options}\n      onChange={({ option }: { option: keyof typeof labelToValue }) =>\n        onPaletteChange(labelToValue[option])\n      }\n    />\n  );\n};\n","import { Box, Button, Layer } from \"grommet\";\nimport { Pin } from \"grommet-icons\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { useLongPress } from \"./drivers/useLongPress\";\nimport { AvailablePalettes, paletteColorDictionary } from \"./PaletteDictionary\";\nimport { PalettePicker } from \"./PalettePicker\";\nexport const PaletteModal = ({\n  onClickOutside,\n  setColor,\n  palette,\n  pinnedColors,\n  setPinnedColors,\n  setPalette,\n}: {\n  onClickOutside: () => void;\n  setColor: (color: RGBColor) => void;\n  palette: AvailablePalettes;\n  pinnedColors: RGBColor[];\n  setPalette: (palette: AvailablePalettes) => void;\n  setPinnedColors: (colors: RGBColor[]) => void;\n}) => {\n  const paletteColors = paletteColorDictionary[palette];\n  const selectedPalette = paletteColors.map(RGBColor.fromHexString);\n\n  const { onPressDown, onPressUp } = useLongPress(\n    (event) => {\n      const index = getButtonIndex(event);\n      if (index === undefined) return;\n\n      const color = selectedPalette[index];\n\n      const isPinned = !!pinnedColors.find((pinned) =>\n        RGBColor.Equals(pinned, color)\n      );\n\n      if (isPinned) {\n        const currentPinnedColors = [...pinnedColors].filter(\n          (pinned) => !RGBColor.Equals(color, pinned)\n        );\n        setPinnedColors(currentPinnedColors);\n      } else {\n        const currentPinnedColors = [...pinnedColors];\n        currentPinnedColors.push(color);\n        setPinnedColors(currentPinnedColors);\n      }\n    },\n    500,\n    (event) => {\n      if (event === undefined) return;\n\n      const maybeIndex = getButtonIndex(event);\n      if (maybeIndex === undefined) return;\n\n      const color = selectedPalette[maybeIndex];\n      setColor(color);\n      onClickOutside();\n    }\n  );\n  return (\n    <Layer\n      modal\n      position=\"top\"\n      responsive={false}\n      full=\"horizontal\"\n      onClickOutside={onClickOutside}\n    >\n      <Box pad=\"small\" fill>\n        <Box fill pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n          <Box\n            direction=\"row\"\n            wrap\n            justify=\"between\"\n            alignSelf=\"center\"\n            onTouchStart={onPressDown}\n            onTouchEnd={onPressUp}\n          >\n            {Object.values(selectedPalette).map((color, index) => {\n              const isPinned = !!pinnedColors.find((pinned) =>\n                RGBColor.Equals(pinned, color)\n              );\n              return (\n                <Box\n                  key={index}\n                  height=\"xsmall\"\n                  width=\"xsmall\"\n                  pad={{ bottom: \"xsmall\" }}\n                >\n                  <Button\n                    primary\n                    fill=\"vertical\"\n                    size=\"large\"\n                    onClick={() => setColor(color)}\n                    key={index}\n                    data-index={index}\n                    color={color.toHex()}\n                    icon={isPinned ? <Pin /> : undefined}\n                    style={{\n                      borderRadius: \"0\",\n                      border: \"none\",\n                    }}\n                  ></Button>\n                </Box>\n              );\n            })}\n          </Box>\n        </Box>\n        <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n          <PalettePicker palette={palette} onPaletteChange={setPalette} />\n        </Box>\n      </Box>\n    </Layer>\n  );\n};\nfunction getButtonIndex(event: React.TouchEvent): number | undefined {\n  const maybeIndexString = (event.target as HTMLButtonElement).dataset.index;\n  if (!maybeIndexString) return undefined;\n\n  return parseInt(maybeIndexString, 10);\n}\n","import { useRef } from \"react\";\n\nexport const useLongPress = (\n  onLongPressComplete: (event: React.TouchEvent<HTMLDivElement>) => void,\n  duration: number,\n  onLongPressCancel?: (\n    event: React.TouchEvent<HTMLDivElement> | undefined\n  ) => void\n) => {\n  const timeout = useRef<NodeJS.Timeout>();\n  const wasLongPress = useRef(false);\n\n  const cancelTimeout = () => {\n    timeout.current && clearTimeout(timeout.current);\n    timeout.current = undefined;\n  };\n\n  const onPressDown = (event: React.TouchEvent<HTMLDivElement>) => {\n    timeout.current = setTimeout(() => {\n      wasLongPress.current = true;\n      onLongPressComplete(event);\n      cancelTimeout();\n    }, duration);\n  };\n\n  const onPressUp = (event: React.TouchEvent<HTMLDivElement>) => {\n    if (timeout.current === undefined) return;\n    cancelTimeout();\n    onLongPressCancel?.(event);\n  };\n\n  return { onPressDown, onPressUp, wasLongPress };\n};\n","import { Layer, Box, CheckBox } from \"grommet\";\n\nexport const SettingsModal = ({\n  onClickOutside,\n  resetMode,\n  isDarkMode,\n}: {\n  isDarkMode: boolean;\n  onClickOutside: () => void;\n  resetMode: (value: boolean) => void;\n}) => {\n  return (\n    <Layer\n      modal\n      position=\"bottom\"\n      responsive={false}\n      full=\"horizontal\"\n      onClickOutside={onClickOutside}\n    >\n      <Box pad=\"small\" fill>\n        <CheckBox\n          toggle\n          onChange={(event) => resetMode(event.target.checked)}\n          label={\"Dark Mode\"}\n          checked={isDarkMode}\n        />\n      </Box>\n    </Layer>\n  );\n};\n","import { IconProps } from \"grommet-icons\";\nimport { StyledIcon } from \"grommet-icons/StyledIcon\";\n\nexport const DropperIcon = (props: IconProps) => (\n  <StyledIcon viewBox=\"0 0 6.35 6.35\" a11yTitle=\"Dropper\" {...props}>\n    <g fill=\"none\" stroke=\"#000\" strokeWidth=\".52917\">\n      <path d=\"m5.5002.60932c-.20131-.12441-.4432-.27888-.67352-.22451-.30901.072947-.38019.55202-.67352.67352-.13828.057276-.44901 0-.44901 0l-.22451.22451.22451.22451-2.9186 2.9186-.44901 1.347.22451.22451 1.347-.44901 2.9186-2.9186.22451.22451.22451-.22451s-.057276-.31073 1e-7-.44901c.1215-.29333.60057-.36451.67352-.67352.054371-.23032-.10009-.47221-.22451-.67352-.05564-.090027-.13448-.16887-.22451-.22451z\" />\n      <path d=\"m3.7042 1.5073 1.1225 1.1225\" />\n    </g>\n  </StyledIcon>\n);\n","import { IconProps } from \"grommet-icons\";\nimport { StyledIcon } from \"grommet-icons/StyledIcon\";\n\nexport const PaletteIcon = (props: IconProps) => (\n  <StyledIcon viewBox=\"0 0 6.35 6.35\" a11yTitle=\"Palette\" {...props}>\n    <path\n      xmlns=\"http://www.w3.org/2000/svg\"\n      d=\"m5.926 3.1543c-.037745.39288-.36536.56457-.83971.54908-.38933-.01271-1.2873-.15741-1.475.24331-.22247.47492.58533.95042.5725 1.4362-.011288.42757-.61548.57263-1.0208.57263-1.526 0-2.763-1.2542-2.763-2.8012 2e-8-1.5471 1.237-2.8012 2.763-2.8012 1.526 0 2.911 1.2612 2.763 2.8012z\"\n      fillOpacity=\"0\"\n      strokeWidth=\".52917\"\n    />\n    <circle cx=\"1.5769\" cy=\"3.5063\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"1.8923\" cy=\"2.1661\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"3.8408\" cy=\"1.7492\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"2.7456\" cy=\"1.4877\" r=\"0.3784252\" stroke=\"none\" />\n  </StyledIcon>\n);\n","import { Button, ButtonProps } from \"grommet\";\nexport const HighlightableButton = ({\n  onClick,\n  isHighlighted,\n  ...props\n}: {\n  onClick: () => void;\n  isHighlighted: boolean;\n} & ButtonProps &\n  Omit<JSX.IntrinsicElements[\"button\"], \"color\">) => {\n  return (\n    <Button\n      onClick={onClick}\n      style={{\n        borderRadius: \"18px\",\n        boxShadow: isHighlighted ? \"0 0 2px 2px green\" : \"none\",\n      }}\n      {...props}\n    />\n  );\n};\n","import { Box, Button, Grid } from \"grommet\";\nimport {\n  Brush,\n  Erase,\n  Grid as GridIcon,\n  History,\n  Pin,\n  Redo,\n  Trash,\n  Undo,\n  Paint,\n} from \"grommet-icons\";\nimport { DropperIcon } from \"./components/DropperIcon\";\nimport { PaletteIcon } from \"./components/PaletteIcon\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { HighlightableButton } from \"./HighlightableButton\";\n\nexport const ToolsBanner = ({\n  onBrushChange,\n  onPickerModeClick,\n  onUndoClick,\n  onRedoClick,\n  onPaletteButtonClick,\n  onGridButtonClick,\n  onTrashClick,\n  isGridShown,\n  color,\n  pickerMode,\n  brush,\n}: {\n  onPickerModeClick: (pickerMode: \"history\" | \"pinned\") => void;\n  onUndoClick: () => void;\n  onRedoClick: () => void;\n  onPaletteButtonClick: () => void;\n  onGridButtonClick: () => void;\n  onTrashClick: () => void;\n  onBrushChange: (brush: \"eraser\" | \"paint\" | \"dropper\" | \"fill\") => void;\n  pickerMode: \"history\" | \"pinned\";\n  brush: \"eraser\" | \"paint\" | \"dropper\" | \"fill\";\n  isGridShown: boolean;\n  color: RGBColor;\n}) => {\n  return (\n    <Box height=\"xsmall\">\n      <Grid\n        fill\n        columns={[\"auto\", \"auto\"]}\n        rows={[\"flex\", \"flex\"]}\n        areas={[\n          { name: \"left-top\", start: [0, 0], end: [0, 0] },\n          { name: \"left-bot\", start: [0, 1], end: [0, 1] },\n          { name: \"right-top\", start: [1, 0], end: [1, 0] },\n          { name: \"right-bot\", start: [1, 1], end: [1, 1] },\n        ]}\n      >\n        <Box gridArea=\"left-top\" direction=\"row\">\n          <HighlightableButton\n            primary\n            onClick={() => onBrushChange(\"paint\")}\n            isHighlighted={brush === \"paint\"}\n            icon={<Brush />}\n            color={color.toHex()}\n          />\n          <HighlightableButton\n            onClick={() => onBrushChange(\"eraser\")}\n            isHighlighted={brush === \"eraser\"}\n            icon={<Erase />}\n          />\n          <HighlightableButton\n            primary\n            onClick={() => onBrushChange(\"fill\")}\n            isHighlighted={brush === \"fill\"}\n            icon={<Paint />}\n            color={color.toHex()}\n          />\n          <Button onClick={onPaletteButtonClick} icon={<PaletteIcon />} />\n          <HighlightableButton\n            onClick={() => onBrushChange(\"dropper\")}\n            isHighlighted={brush === \"dropper\"}\n            icon={<DropperIcon />}\n          />\n        </Box>\n        <Box gridArea=\"left-bot\" direction=\"row\">\n          <HighlightableButton\n            icon={<History />}\n            onClick={() => onPickerModeClick(\"history\")}\n            isHighlighted={pickerMode === \"history\"}\n          />\n          <HighlightableButton\n            icon={<Pin />}\n            onClick={() => onPickerModeClick(\"pinned\")}\n            isHighlighted={pickerMode === \"pinned\"}\n          />\n        </Box>\n        <Box gridArea=\"right-top\" direction=\"row\" justify=\"end\">\n          <Button icon={<Undo />} onClick={onUndoClick} />\n          <Button icon={<Redo />} onClick={onRedoClick} />\n        </Box>\n        <Box gridArea=\"right-bot\" direction=\"row\" justify=\"end\">\n          <Button onClick={onTrashClick} icon={<Trash />} />\n          <HighlightableButton\n            onClick={onGridButtonClick}\n            isHighlighted={isGridShown}\n            icon={<GridIcon />}\n          />\n        </Box>\n      </Grid>\n    </Box>\n  );\n};\n","import { Grid, grommet, Grommet, Header, Main } from \"grommet\";\nimport React, { useMemo, useState } from \"react\";\nimport { BodyColorPicker } from \"./BodyColorPicker\";\nimport { CanvasStack } from \"./CanvasStack\";\nimport { ValidDimensions } from \"./components/DimensionPicker\";\nimport { ConfirmModal, ConfirmModalProps } from \"./ConfirmModal\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { UndoablePaintCanvas } from \"./drivers/UndoablePaintCanvas\";\nimport { Footer } from \"./Footer\";\nimport { NewPageModal } from \"./NewPageModal\";\nimport { AvailablePalettes } from \"./PaletteDictionary\";\nimport { PaletteModal } from \"./PaletteModal\";\nimport { SettingsModal } from \"./SettingsModal\";\nimport { ToolsBanner } from \"./ToolsBanner\";\n\nconst defaultPalette = \"cga\";\nconst defaultColor = \"#5555ff\";\n\ntype Brushes = \"paint\" | \"dropper\" | \"eraser\" | \"fill\";\n\nconst App = () => {\n  const [pixelDimensions, setPixelDimensions] = useState<ValidDimensions>(16);\n  const [color, setColor] = useState<RGBColor>(\n    RGBColor.fromHexString(defaultColor)\n  );\n\n  const [confirmModalParameters, createModal] = useState<\n    ConfirmModalProps | undefined\n  >(undefined);\n\n  const [brush, setBrush] = useState<Brushes>(\"paint\");\n\n  const [pickerMode, setPickerMode] = useState<\"history\" | \"pinned\">(\"pinned\");\n  const [isGridShown, setGridShown] = useState(false);\n  const [isPaletteModalShown, setPaletteMenuShown] = useState(false);\n  const [palette, setPalette] = useState<AvailablePalettes>(defaultPalette);\n  const [isNewPageModalShown, setCreateMenuShown] = useState(false);\n  const [isSettingsMenuShown, setSettingsMenuShown] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [canvas, setCanvas] = useState<undefined | HTMLCanvasElement>();\n  const [pinnedColors, setPinnedColors] = useState<RGBColor[]>([]);\n  const [colorHistory, setColorHistory] = useState<RGBColor[]>([]);\n\n  const paint = useMemo(() => {\n    return new UndoablePaintCanvas(pixelDimensions);\n  }, [pixelDimensions]);\n\n  const onCanvasTouch = (\n    canvas: HTMLCanvasElement,\n    event: React.TouchEvent<HTMLCanvasElement>\n  ): void => {\n    switch (brush) {\n      case \"dropper\": {\n        setBrush(\"paint\");\n        const coords = paint.touchToCoords(event);\n        const selectedColor = paint.getColorAt(coords.quantX, coords.quantY);\n        if (selectedColor === RGBColor.NO_COLOR) break;\n        setColor(selectedColor);\n        break;\n      }\n      case \"paint\": {\n        paint.setCanvas(canvas);\n        paint.touchEvent(event, color);\n        paint.drawToCanvas();\n        break;\n      }\n      case \"eraser\": {\n        paint.setCanvas(canvas);\n        paint.touchEvent(event, RGBColor.NO_COLOR);\n        paint.drawToCanvas();\n        break;\n      }\n      case \"fill\": {\n        paint.setCanvas(canvas);\n        const coords = paint.touchToCoords(event);\n        paint.fillWithColor(coords.quantX, coords.quantY, color);\n        paint.drawToCanvas();\n\n        break;\n      }\n    }\n  };\n\n  const onCanvasCreated = (canvas: HTMLCanvasElement): void => {\n    setCanvas(canvas);\n    paint.setCanvas(canvas);\n  };\n\n  const onUndoClick = () => {\n    paint.undo();\n    paint.drawToCanvas();\n  };\n\n  const onRedoClick = () => {\n    paint.redo();\n    paint.drawToCanvas();\n  };\n\n  const onPaletteButtonClick = () => setPaletteMenuShown(!isPaletteModalShown);\n  const onGridButtonClick = () => setGridShown(!isGridShown);\n\n  const onTrashClick = () =>\n    createModal({\n      onAccept: () => {\n        createModal(undefined);\n\n        paint.clear();\n        paint.drawToCanvas();\n      },\n      message: \"Are you sure you want to clear the canvas?\",\n      acceptButtonText: \"Clear\",\n      onCancel: () => {\n        createModal(undefined);\n      },\n    });\n  const setColorAndTurnOffPicker = (color: RGBColor): void => {\n    setColor(color);\n    setBrush(\"paint\");\n  };\n\n  const isConfirmModalShown = !!confirmModalParameters;\n  /**\n   * TODO: Add darkmode and settings modal\n   */\n  return (\n    <Grommet\n      theme={grommet}\n      style={{ height: \"100%\" }}\n      themeMode={darkMode ? \"dark\" : \"light\"}\n    >\n      <Grid\n        fill\n        areas={[\n          { name: \"header\", start: [0, 0], end: [0, 0] },\n          { name: \"canvas\", start: [0, 1], end: [0, 1] },\n          { name: \"body\", start: [0, 2], end: [0, 2] },\n          { name: \"footer\", start: [0, 3], end: [0, 3] },\n        ]}\n        columns={[\"full\"]}\n        rows={[\"auto\", \"auto\", \"flex\", \"xxsmall\"]}\n      >\n        <Header gridArea=\"header\" justify=\"center\">\n          Pixel Pixy\n        </Header>\n        <CanvasStack\n          stackProps={{ gridArea: \"canvas\" }}\n          isGridShown={isGridShown}\n          isPaletteMenuShown={isPaletteModalShown}\n          onCanvasCreated={onCanvasCreated}\n          onCanvasTouch={onCanvasTouch}\n          pixelDimensions={pixelDimensions}\n        />\n\n        <Main gridArea=\"body\" pad=\"small\" elevation=\"xsmall\">\n          <ToolsBanner\n            color={color}\n            brush={brush}\n            isGridShown={isGridShown}\n            onPickerModeClick={setPickerMode}\n            onBrushChange={setBrush}\n            onGridButtonClick={onGridButtonClick}\n            onPaletteButtonClick={onPaletteButtonClick}\n            onRedoClick={onRedoClick}\n            onUndoClick={onUndoClick}\n            onTrashClick={onTrashClick}\n            pickerMode={pickerMode}\n          />\n\n          <BodyColorPicker\n            setColorHistory={setColorHistory}\n            colorHistory={colorHistory}\n            pickerMode={pickerMode}\n            color={color}\n            palette={palette}\n            pinnedColors={pinnedColors}\n            setColorAndTurnOffPicker={setColorAndTurnOffPicker}\n          />\n        </Main>\n        {canvas && (\n          <Footer\n            gridArea=\"footer\"\n            canvas={canvas}\n            onAddButtonClicked={() => setCreateMenuShown(true)}\n            setSettingsMenuShown={setSettingsMenuShown}\n          />\n        )}\n      </Grid>\n\n      {isPaletteModalShown && (\n        <PaletteModal\n          pinnedColors={pinnedColors}\n          setPinnedColors={setPinnedColors}\n          onClickOutside={() => setPaletteMenuShown(false)}\n          setColor={setColorAndTurnOffPicker}\n          palette={palette}\n          setPalette={setPalette}\n        />\n      )}\n\n      {isConfirmModalShown && (\n        <ConfirmModal\n          onAccept={confirmModalParameters!.onAccept}\n          onCancel={confirmModalParameters!.onCancel}\n          cancelButtonText={confirmModalParameters!.cancelButtonText}\n          acceptButtonText={confirmModalParameters!.acceptButtonText}\n          message={confirmModalParameters!.message}\n        />\n      )}\n\n      {isNewPageModalShown && (\n        <NewPageModal\n          currentDimension={pixelDimensions}\n          onCancel={() => setCreateMenuShown(false)}\n          onCreateNew={(dimension, maybeLoadedImage) => {\n            paint.clear();\n            if (dimension !== pixelDimensions) {\n              setPixelDimensions(dimension);\n            }\n            if (maybeLoadedImage !== undefined) {\n              paint.setPixelsFromImage(maybeLoadedImage);\n            }\n            paint.drawToCanvas();\n            setCreateMenuShown(false);\n          }}\n        />\n      )}\n\n      {isSettingsMenuShown && (\n        <SettingsModal\n          isDarkMode={darkMode}\n          onClickOutside={() => setSettingsMenuShown(false)}\n          resetMode={setDarkMode}\n        />\n      )}\n    </Grommet>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nwindow.oncontextmenu = function (event: MouseEvent) {\n  event.preventDefault();\n  event.stopPropagation();\n  return false;\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
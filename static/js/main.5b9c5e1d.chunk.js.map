{"version":3,"sources":["components/ColorPickerHistory.tsx","components/PinnedColors.tsx","drivers/Color.ts","BodyColorPicker.tsx","components/CanvasContainer.tsx","components/Grid.tsx","CanvasStack.tsx","Modal.tsx","ConfirmModal.tsx","drivers/UndoablePaintCanvas.ts","drivers/getRelativeClickPosition.tsx","components/SaveButton.tsx","Footer.tsx","components/DimensionPicker.tsx","components/LoadButton.tsx","NewPageModal.tsx","PaletteDictionary.tsx","PalettePicker.tsx","PaletteModal.tsx","drivers/useLongPress.tsx","BackgroundColorForm.tsx","Tools.ts","BackgroundImageForm.tsx","SettingsModal.tsx","components/DropperIcon.tsx","components/PaletteIcon.tsx","HighlightableButton.tsx","ControlsBanner.tsx","useTimeout.tsx","ControlsFeedback.tsx","App.tsx","index.tsx"],"names":["ColorPickerHistory","colorSelected","onColorPicked","colorHistory","setColorHistory","Box","className","direction","justify","wrap","gap","map","color","index","Button","primary","icon","Blank","onClick","toHex","style","borderRadius","PinnedColors","pinnedColors","slice","HSLColor","hue","saturation","lightness","hsl","this","hslString","sep","indexOf","substr","split","hString","s","parseFloat","length","l","h","Math","round","PI","r","g","b","cMin","min","cMax","max","delta","abs","RGBColor","fromHSL","red","green","blue","rgb","RangeError","c","x","m","hex","Number","isInteger","TypeError","hexString","toString","fromHexString","rgbString","rgbChunks","rgbValues","R","parseInt","rString","gString","bString","fromRGB","a","r1","g1","b1","r2","g2","b2","NO_COLOR","BodyColorPicker","setColorAndTurnOffPicker","pickerMode","palette","useEffect","filter","currentColor","Equals","newColorHistory","unshift","CanvasContainer","onCanvasCreated","onTouchEvent","pixelDimensions","background","canvasRef","useRef","canvas","current","onInnerTouchEvent","event","backgroundStyle","useMemo","getBackgroundStyle","backgroundClass","getBackgroundClass","ref","width","height","onTouchEnd","onTouchMove","type","backgroundSize","backgroundColor","backgroundImage","image","src","size","Grid","rootCanvas","context","getContext","clearRect","strokeStyle","lineWidth","xIncrement","xIndex","moveTo","lineTo","stroke","yIncrement","yIndex","clientWidth","clientHeight","CanvasStack","isGridShown","onCanvasTouch","stackProps","useState","setCanvas","Stack","Modal","onClose","children","heading","Layer","modal","full","onClickOutside","pad","fill","Text","Close","ConfirmModal","onAccept","onCancel","message","cancelButtonText","acceptButtonText","alignSelf","label","Symbol","iterator","toStringTag","KeyPairMap","keyPairMap","Map","keyA","keyB","value","set","clear","get","delete","callbackfn","thisArg","toRefMap","forEach","tempMap","innerMap","outerMap","keys","has","entries","values","lines","key","push","join","UndoablePaintCanvas","dimension","undoBuffer","cellExists","y","getPixelMap","UndoRedoBuffer","clone","addCurrent","undo","setPixelMap","redo","redoOne","undefined","fillColor","startColor","getColorAt","visited","floodFill","cellColor","AreColorsEqual","pixelMap","Error","PaintCanvas","DrawToCanvas","drawToCanvas","AreDimensionsCompatible","document","createElement","naturalWidth","naturalHeight","drawImage","setPixelsFromCanvas","xIntervals","yIntervals","mutableMap","data","getImageData","maybeColor","results","Array","elementResult","result","paintCanvas","fillStyle","fillRect","sqrt","touchToCoords","quantX","quantY","setColorAt","screenX","changedTouches","clientX","screenY","clientY","rect","target","getBoundingClientRect","clip","clippedX","left","clippedY","top","relativeX","relativeY","getRelativeClickPosition","scaledX","scaledY","floor","colorA","colorB","redoBuffer","maybeTop","getBufferLength","redid","pop","base","maxSize","buffer","maybeReverseState","SaveButton","anchorRef","onShareClick","fullScaleCanvas","drawToHigherResolutionCanvas","Promise","resolve","reject","toBlob","maybeBlob","blob","location","protocol","navigator","share","files","Object","freeze","File","canShare","title","catch","error","name","console","debug","toDataURL","href","click","Share","focusIndicator","display","download","imageSmoothingEnabled","Footer","onAddButtonClicked","setSettingsMenuShown","gridArea","right","columns","count","align","Actions","Add","labelToValue","valueToLabel","1","8","10","12","14","16","18","20","22","24","options","DimensionPicker","onDimensionChange","Select","placeholder","onChange","option","LoadButton","setLoadedImage","imageName","setImageName","input","imagePromise","imageUrl","URL","createObjectURL","Image","onload","accept","NewPageModal","currentDimension","onCreateNew","loadedImage","setDimension","bottom","paletteColorDictionary","c64","cga","teletext","paletteNameDictionary","Teletext","PalettePicker","onPaletteChange","possiblePalettes","PaletteModal","setColor","setPinnedColors","setPalette","innerPalette","setInnerPalette","selectedPalette","onLongPressComplete","duration","onLongPressCancel","timeout","wasLongPress","cancelTimeout","clearTimeout","onPressDown","setTimeout","onPressUp","useLongPress","getButtonIndex","find","pinned","currentPinnedColors","preventDefault","maybeIndex","onTouchStart","isPinned","data-index","Pin","border","maybeIndexString","dataset","BackgroundColorForm","onFormComplete","innerColor","isPaletteModalShown","setPaletteMenuShown","backgroundTypes","backgroundBackgroundImageSizes","BackgroundImageForm","imageSize","setImageSize","setImage","fit","SettingsModal","onSave","setDarkMode","isDarkMode","isFeedbackOn","backgroundType","setBackgroundType","backgroundData","setBackgroundData","innerIsFeedbackOn","setFeedbackOn","CheckBox","toggle","checked","disabled","DropperIcon","props","StyledIcon","viewBox","a11yTitle","strokeWidth","d","PaletteIcon","xmlns","fillOpacity","cx","cy","HighlightableButton","isHighlighted","boxShadow","ControlsBanner","onToolChange","onPickerModeClick","onUndoClick","onRedoClick","onPaletteButtonClick","onGridButtonClick","onTrashClick","onControlsClick","tool","callBefore","callback","control","arg","rows","areas","start","end","Brush","Erase","Paint","History","Undo","Redo","Trash","useTimeout","delay","id","controlToFeedback","dropper","eraser","grid","history","paint","trash","ControlsFeedback","opacity","setOpacity","position","responsive","animation","horizontal","vertical","mergedTheme","deepMerge","grommet","medium","global","edgeSize","small","useStickyBrush","defaultBrush","setTool","brush","setBrush","useCallback","App","setPixelDimensions","confirmModalParameters","createModal","setBackground","setToolAndBrush","setControl","setPickerMode","setGridShown","isControlsFeedbackModalShown","setControlsFeedbackModalShown","isNewPageModalShown","setCreateMenuShown","isSettingsMenuShown","darkMode","isConfirmModalShown","Grommet","theme","themeMode","Header","interactiveChild","coords","selectedColor","touchEvent","fillWithColor","Main","elevation","maybeLoadedImage","setPixelsFromImage","settingsData","window","oncontextmenu","stopPropagation","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5b9c5e1d.chunk.js","sourcesContent":["import { Box, Button } from \"grommet\";\nimport { RGBColor } from \"../drivers/Color\";\nimport { Blank } from \"grommet-icons\";\n\nexport const ColorPickerHistory = ({\n  colorSelected,\n  onColorPicked,\n  colorHistory,\n  setColorHistory,\n}: {\n  setColorHistory: (history: RGBColor[]) => void;\n  colorHistory: RGBColor[];\n  colorSelected: RGBColor;\n  onColorPicked: (color: RGBColor) => void;\n}) => {\n  return (\n    <Box\n      className=\"ColorPickerHistory\"\n      direction=\"row\"\n      justify=\"start\"\n      wrap\n      gap={\"xxsmall\"}\n    >\n      {colorHistory.map((color, index) => (\n        <Button\n          primary\n          icon={<Blank />}\n          onClick={() => onColorPicked(color)}\n          key={index}\n          color={color.toHex()}\n          style={{ borderRadius: 0 }}\n        ></Button>\n      ))}\n    </Box>\n  );\n};\n","import { Box, Button } from \"grommet\";\nimport { RGBColor } from \"../drivers/Color\";\nimport { Blank } from \"grommet-icons\";\n\nexport const PinnedColors = ({\n  pinnedColors = [],\n  onColorPicked,\n}: {\n  pinnedColors: RGBColor[];\n  onColorPicked: (color: RGBColor) => void;\n}) => {\n  return (\n    <Box\n      className=\"ColorPickerHistory\"\n      direction=\"row\"\n      justify=\"start\"\n      wrap\n      gap=\"xxsmall\"\n    >\n      {pinnedColors.slice(0, 8).map((color, index) => (\n        <Button\n          primary\n          icon={<Blank />}\n          onClick={() => onColorPicked(color)}\n          key={index}\n          color={color.toHex()}\n          style={{ borderRadius: 0 }}\n        ></Button>\n      ))}\n    </Box>\n  );\n};\n","export class HSLColor {\n  /**\n   * @param hslString A string following the possible forms\n   * hsl(180 100% 50%)\n   * hsl(180deg,100%,50%)\n   * hsl(180deg 100% 50%)\n   * hsl(3.14rad,100%,50%)\n   * hsl(3.14rad 100% 50%)\n   * hsl(0.5turn,100%,50%)\n   * hsl(0.5turn 100% 50%)\n   */\n  static fromHSLString(hslString: string) {\n    let sep = hslString.indexOf(\",\") > -1 ? \",\" : \" \";\n    const hsl = hslString.substr(4).split(\")\")[0].split(sep);\n\n    let hString = hsl[0];\n    let s = parseFloat(hsl[1].substr(0, hsl[1].length - 1)) / 100;\n    let l = parseFloat(hsl[2].substr(0, hsl[2].length - 1)) / 100;\n\n    let h = 0;\n\n    if (hString.indexOf(\"deg\") > -1)\n      hString = hString.substr(0, hString.length - 3);\n    else if (hString.indexOf(\"rad\") > -1)\n      h = Math.round(\n        parseFloat(hString.substr(0, hString.length - 3)) * (180 / Math.PI)\n      );\n    else if (hString.indexOf(\"turn\") > -1)\n      h = Math.round(parseFloat(hString.substr(0, hString.length - 4)) * 360);\n    // Keep hue fraction of 360 if ending up over\n    if (h >= 360) h %= 360;\n\n    return new HSLColor(h, s, l);\n  }\n\n  static fromRGB(r: number, g: number, b: number) {\n    // Make r, g, and b fractions of 1\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    // Find greatest and smallest channel values\n    let cMin = Math.min(r, g, b);\n    let cMax = Math.max(r, g, b);\n    let delta = cMax - cMin;\n    let h = 0;\n    let s = 0;\n    let l = 0;\n\n    // Calculate hue\n    // No difference\n    if (delta === 0) h = 0;\n    // Red is max\n    else if (cMax === r) h = ((g - b) / delta) % 6;\n    // Green is max\n    else if (cMax === g) h = (b - r) / delta + 2;\n    // Blue is max\n    else h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    // Make negative hues positive behind 360°\n    if (h < 0) h += 360;\n\n    // Calculate lightness\n    l = (cMax + cMin) / 2;\n\n    // Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n    return new HSLColor(h, s, l);\n  }\n\n  constructor(hue: number, saturation: number, lightness: number) {\n    this.hsl = [hue, saturation, lightness];\n  }\n\n  hsl: [number, number, number];\n\n  get h() {\n    return this.hsl[0];\n  }\n  get s() {\n    return this.hsl[1];\n  }\n  get l() {\n    return this.hsl[2];\n  }\n\n  set h(h: number) {\n    this.hsl[0] = h;\n  }\n  set s(s: number) {\n    this.hsl[1] = s;\n  }\n  set l(l: number) {\n    this.hsl[2] = l;\n  }\n\n  toHSLString() {\n    const [h, s, l] = this.hsl;\n    return \"hsl(\" + h + \",\" + s * 100 + \"%,\" + l * 100 + \"%)\";\n  }\n\n  toRGB(): RGBColor {\n    return RGBColor.fromHSL(...this.hsl);\n  }\n\n  clone(): HSLColor {\n    return new HSLColor(...this.hsl);\n  }\n}\n\nexport type NoColor = \"NO_COLOR\";\nexport class RGBColor {\n  static readonly NO_COLOR: NoColor = \"NO_COLOR\";\n  /**\n   * @param h Degrees\n   * @param s Percent\n   * @param l Percent\n   */\n\n  static fromHSL(h: number, s: number, l: number) {\n    if (h < 0 || h > 359) {\n      throw new RangeError(\"Hue should be between 0 and 359 inclusive\");\n    }\n    if (s < 0 || s > 1) {\n      throw new RangeError(\n        \"Saturation is a percentage and should be between 0 and 1 inclusive\"\n      );\n    }\n    if (l < 0 || l > 1) {\n      throw new RangeError(\n        \"Lightness is a percentage and should be between 0 and 1 inclusive\"\n      );\n    }\n\n    let c = (1 - Math.abs(2 * l - 1)) * s;\n    let x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n    let m = l - c / 2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (0 <= h && h < 60) {\n      r = c;\n      g = x;\n      b = 0;\n    } else if (60 <= h && h < 120) {\n      r = x;\n      g = c;\n      b = 0;\n    } else if (120 <= h && h < 180) {\n      r = 0;\n      g = c;\n      b = x;\n    } else if (180 <= h && h < 240) {\n      r = 0;\n      g = x;\n      b = c;\n    } else if (240 <= h && h < 300) {\n      r = x;\n      g = 0;\n      b = c;\n    } else if (300 <= h && h < 360) {\n      r = c;\n      g = 0;\n      b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return new RGBColor(r, g, b);\n  }\n\n  /**\n   * @param hex A number between 0-16777215\n   */\n  static fromHex(hex: number) {\n    if (!Number.isInteger(hex))\n      throw new TypeError(`Number should be an integer, got: ${hex}`);\n    if (hex < 0 || hex > (2 ^ 24)) {\n      throw new RangeError(\"Number should be between 0-16777215 inclusive\");\n    }\n\n    const hexString = hex.toString(16);\n\n    return RGBColor.fromHexString(\"#\" + hexString);\n  }\n\n  static fromRGBString(rgbString: string) {\n    let sep = rgbString.indexOf(\",\") > -1 ? \",\" : \" \";\n    const rgbChunks = rgbString.substr(4).split(\")\")[0].split(sep);\n    const rgbValues: number[] = [];\n\n    for (let R in rgbChunks) {\n      let r = rgbChunks[R];\n      if (r.indexOf(\"%\") > -1)\n        rgbValues[R] =\n          Math.round(parseFloat(r.substr(0, r.length - 1)) / 100) * 255;\n    }\n\n    const r = rgbValues[0];\n    const g = rgbValues[1];\n    const b = rgbValues[2];\n\n    return new RGBColor(r, g, b);\n  }\n\n  static fromHexString(hexString: string) {\n    if (hexString.length !== 7) {\n      throw new TypeError(\n        \"Hex string is not 7 characters long. Got: \" + hexString\n      );\n    }\n\n    if (hexString[0] !== \"#\") {\n      throw new TypeError(\n        \"Hex color string should start with #. Got: \" + hexString[0]\n      );\n    }\n\n    const r = parseInt(\"0x\" + hexString[1] + hexString[2], 16);\n    const g = parseInt(\"0x\" + hexString[3] + hexString[4], 16);\n    const b = parseInt(\"0x\" + hexString[5] + hexString[6], 16);\n\n    return new RGBColor(r, g, b);\n  }\n\n  constructor(red: number, green: number, blue: number) {\n    this.rgb = [red, green, blue];\n  }\n\n  rgb: [number, number, number];\n\n  get r() {\n    return this.rgb[0];\n  }\n  get g() {\n    return this.rgb[1];\n  }\n  get b() {\n    return this.rgb[2];\n  }\n\n  set r(r: number) {\n    this.rgb[0] = r;\n  }\n  set g(g: number) {\n    this.rgb[1] = g;\n  }\n  set b(b: number) {\n    this.rgb[2] = b;\n  }\n\n  static Equals(a: RGBColor, b: RGBColor) {\n    const [r1, g1, b1] = a.rgb;\n    const [r2, g2, b2] = b.rgb;\n\n    return r1 === r2 && g1 === g2 && b1 === b2;\n  }\n\n  toHex() {\n    const [r, g, b] = this.rgb;\n    let rString = r.toString(16);\n    let gString = g.toString(16);\n    let bString = b.toString(16);\n\n    if (rString.length === 1) rString = \"0\" + rString;\n    if (gString.length === 1) gString = \"0\" + gString;\n    if (bString.length === 1) bString = \"0\" + bString;\n\n    return \"#\" + rString + gString + bString;\n  }\n\n  toHSL(): HSLColor {\n    return HSLColor.fromRGB(...this.rgb);\n  }\n}\n","import { ColorPickerHistory } from \"./components/ColorPickerHistory\";\nimport { PinnedColors } from \"./components/PinnedColors\";\nimport { useEffect } from \"react\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { AvailablePalettes } from \"./PaletteDictionary\";\n\n/** TODO: Make a component that displays a list of colors.\n * Use logic here to decide which colors to show.\n * Probably remove ColorPickerHistory and PinnedColors and combine into here */\nexport const BodyColorPicker = ({\n  setColorAndTurnOffPicker,\n  color,\n  palette,\n  pickerMode,\n  pinnedColors,\n  colorHistory,\n  setColorHistory,\n}: {\n  pickerMode: \"history\" | \"pinned\";\n  setColorHistory: (history: RGBColor[]) => void;\n  setColorAndTurnOffPicker: (color: RGBColor) => void;\n  color: RGBColor;\n  palette: AvailablePalettes;\n  pinnedColors: RGBColor[];\n  colorHistory: RGBColor[];\n}) => {\n  useEffect(() => {\n    if (\n      colorHistory.filter((currentColor) => {\n        return RGBColor.Equals(currentColor, color);\n      }).length !== 0\n    ) {\n      return;\n    }\n\n    let newColorHistory = [...colorHistory];\n    newColorHistory.unshift(color);\n    if (newColorHistory.length > 8) {\n      newColorHistory = newColorHistory.slice(0, 8);\n    }\n\n    setColorHistory(newColorHistory);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [color]);\n\n  if (pickerMode === \"history\") {\n    return (\n      <ColorPickerHistory\n        setColorHistory={setColorHistory}\n        colorHistory={colorHistory}\n        onColorPicked={setColorAndTurnOffPicker}\n        colorSelected={color}\n      />\n    );\n  } else {\n    return (\n      <PinnedColors\n        onColorPicked={setColorAndTurnOffPicker}\n        pinnedColors={pinnedColors}\n      />\n    );\n  }\n};\n","import { TouchEvent, useEffect, useMemo, useRef } from \"react\";\nimport \"../styles/CanvasContainer.css\";\nimport { Backgrounds } from \"../Tools\";\n\nexport const CanvasContainer = ({\n  onCanvasCreated,\n  onTouchEvent,\n  pixelDimensions,\n  background,\n}: {\n  pixelDimensions: number;\n  onCanvasCreated: (canvas: HTMLCanvasElement) => void;\n  onTouchEvent: (\n    canvas: HTMLCanvasElement,\n    touchEvent: TouchEvent<HTMLCanvasElement>\n  ) => void;\n  background: Backgrounds;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      onCanvasCreated(canvas);\n    }\n  }, [onCanvasCreated]);\n\n  const onInnerTouchEvent = (event: TouchEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    onTouchEvent(canvas, event);\n  };\n\n  const backgroundStyle = useMemo(\n    () => getBackgroundStyle(background, pixelDimensions),\n    [background, pixelDimensions]\n  );\n  const backgroundClass = useMemo(() => getBackgroundClass(background), [\n    background,\n  ]);\n\n  return (\n    <canvas\n      className={`CanvasContainer ${backgroundClass}`}\n      style={backgroundStyle}\n      ref={canvasRef}\n      width={pixelDimensions}\n      height={pixelDimensions}\n      onTouchEnd={onInnerTouchEvent}\n      onTouchMove={onInnerTouchEvent}\n    />\n  );\n};\n\nconst getBackgroundClass = (background: Backgrounds) => {\n  switch (background.type) {\n    case \"checkerboard\":\n      return \"CheckerboardBackground\";\n    case \"color\":\n      return \"ColorBackground\";\n    case \"image\":\n      return \"ImageBackground\";\n  }\n};\n\nconst getBackgroundStyle = (\n  background: Backgrounds,\n  pixelDimensions: number\n) => {\n  switch (background.type) {\n    case \"checkerboard\":\n      return {\n        backgroundSize: `${100 / pixelDimensions / 2}%`,\n      };\n    case \"color\":\n      return {\n        backgroundColor: background.color.toHex(),\n      };\n    case \"image\":\n      return {\n        backgroundColor: background.color.toHex(),\n        backgroundImage: `url(${background.image.src})`,\n        backgroundSize: background.size,\n      };\n  }\n};\n","import { useEffect, useRef } from \"react\";\nimport \"../styles/Grid.css\";\n\nexport const Grid = ({\n  pixelDimensions,\n  rootCanvas,\n}: {\n  pixelDimensions: number;\n  rootCanvas: HTMLCanvasElement;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n\n    if (!context || !canvas) return;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.strokeStyle = \"lightgrey\";\n    context.lineWidth = 1;\n    const xIncrement = canvas.width / pixelDimensions;\n    for (let xIndex = 0; xIndex < pixelDimensions; xIndex++) {\n      context.moveTo(Math.round(xIndex * xIncrement), 0);\n      context.lineTo(Math.round(xIndex * xIncrement), canvas.height);\n      context.stroke();\n    }\n\n    // Horizontal lines\n    const yIncrement = canvas.height / pixelDimensions;\n    for (let yIndex = 0; yIndex < pixelDimensions; yIndex++) {\n      context.moveTo(0, Math.round(yIndex * yIncrement));\n      context.lineTo(canvas.width, Math.round(yIndex * yIncrement));\n      context.stroke();\n    }\n\n    return () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n  });\n  return (\n    <canvas\n      ref={canvasRef}\n      key={pixelDimensions}\n      className=\"Grid\"\n      width={rootCanvas.clientWidth}\n      height={rootCanvas.clientHeight}\n    />\n  );\n};\n","import { Stack, StackProps } from \"grommet\";\nimport { useState } from \"react\";\nimport { CanvasContainer } from \"./components/CanvasContainer\";\nimport { ValidDimensions } from \"./components/DimensionPicker\";\nimport { Grid } from \"./components/Grid\";\nimport { Backgrounds } from \"./Tools\";\nexport const CanvasStack = ({\n  isGridShown,\n  pixelDimensions,\n  background,\n  onCanvasCreated,\n  onCanvasTouch,\n  stackProps,\n}: {\n  isGridShown: boolean;\n  pixelDimensions: ValidDimensions;\n  background: Backgrounds;\n  onCanvasCreated: (canvas: HTMLCanvasElement) => void;\n  onCanvasTouch: (\n    canvas: HTMLCanvasElement,\n    event: React.TouchEvent<HTMLCanvasElement>\n  ) => void;\n  stackProps: StackProps;\n}) => {\n  const [canvas, setCanvas] = useState<HTMLCanvasElement>();\n  return (\n    <Stack {...stackProps}>\n      <CanvasContainer\n        onCanvasCreated={(canvas) => {\n          setCanvas(canvas);\n          onCanvasCreated(canvas);\n        }}\n        background={background}\n        pixelDimensions={pixelDimensions}\n        onTouchEvent={onCanvasTouch}\n      />\n\n      {canvas && isGridShown && (\n        <Grid pixelDimensions={pixelDimensions} rootCanvas={canvas} />\n      )}\n    </Stack>\n  );\n};\n","import { Box, Button, Layer, Text } from \"grommet\";\nimport { Close } from \"grommet-icons\";\nimport { PropsWithChildren } from \"react\";\n\nexport const Modal = ({\n  onClose,\n  children,\n  heading,\n}: PropsWithChildren<{ onClose: () => void; heading: string }>) => {\n  return (\n    <Layer modal full=\"horizontal\" onClickOutside={onClose}>\n      <Box pad=\"small\" fill>\n        <Box direction=\"row\" fill={\"horizontal\"} justify=\"between\">\n          <Box justify=\"center\">\n            <Text>{heading}</Text>\n          </Box>\n          <Box direction=\"row\" justify=\"end\">\n            <Button icon={<Close />} onClick={() => onClose()}></Button>\n          </Box>\n        </Box>\n        <Box>{children}</Box>\n      </Box>\n    </Layer>\n  );\n};\n","import { Box, Button, Text } from \"grommet\";\nimport React from \"react\";\nimport { Modal } from \"./Modal\";\n\nexport type ConfirmModalProps = {\n  onAccept: () => void;\n  onCancel?: () => void;\n  onClose: () => void;\n  message?: string;\n  acceptButtonText?: string;\n  cancelButtonText?: string;\n};\n\nexport const ConfirmModal = ({\n  onAccept,\n  onCancel,\n  onClose,\n  message = \"Are you sure?\",\n  cancelButtonText = \"Cancel\",\n  acceptButtonText = \"Accept\",\n}: ConfirmModalProps) => {\n  return (\n    <Modal onClose={onClose} heading={\"Confirm?\"}>\n      <Text alignSelf=\"center\">{message}</Text>\n      <Box direction=\"row\" justify=\"between\" gap=\"small\">\n        <Button label={cancelButtonText} onClick={onCancel} alignSelf=\"start\" />\n        <Button\n          primary\n          label={acceptButtonText}\n          onClick={onAccept}\n          alignSelf=\"end\"\n        />\n      </Box>\n    </Modal>\n  );\n};\n","import { NoColor, RGBColor } from \"./Color\";\nimport { getRelativeClickPosition } from \"./getRelativeClickPosition\";\n\nexport class KeyPairMap<KeyA, KeyB, Value> implements Map<[KeyA, KeyB], Value> {\n  constructor(keyPairMap?: KeyPairMap<KeyA, KeyB, Value>) {\n    if (!keyPairMap) return;\n\n    for (let [[keyA, keyB], value] of keyPairMap) {\n      this.set([keyA, keyB], value);\n    }\n  }\n\n  private map = new Map<KeyA, Map<KeyB, Value>>();\n\n  clear(): void {\n    this.map.clear();\n  }\n\n  delete([keyA, keyB]: [KeyA, KeyB]): boolean {\n    return this.map.get(keyA)?.delete(keyB) || false;\n  }\n\n  clone(): KeyPairMap<KeyA, KeyB, Value> {\n    return new KeyPairMap(this);\n  }\n\n  forEach(\n    callbackfn: (\n      value: Value,\n      key: [KeyA, KeyB],\n      map: Map<[KeyA, KeyB], Value>\n    ) => void,\n    thisArg?: any\n  ): void {\n    const refMap = this.toRefMap();\n\n    refMap.forEach(callbackfn, thisArg);\n  }\n\n  private toRefMap() {\n    const tempMap = new Map<[KeyA, KeyB], Value>();\n    this.map.forEach((innerMap, keyA, outerMap) => {\n      innerMap.forEach((value, keyB, innerMap) => {\n        const keys = [keyA, keyB] as [KeyA, KeyB];\n        tempMap.set(keys, value);\n      });\n    });\n    return tempMap;\n  }\n\n  get([keyA, keyB]: [KeyA, KeyB]): Value | undefined {\n    return this.map.get(keyA)?.get(keyB);\n  }\n\n  has([keyA, keyB]: [KeyA, KeyB]): boolean {\n    return this.map.get(keyA)?.has(keyB) || false;\n  }\n\n  set([keyA, keyB]: [KeyA, KeyB], value: Value): this {\n    const hasKeyA = this.map.has(keyA);\n\n    if (!hasKeyA) {\n      this.map.set(keyA, new Map());\n    }\n    this.map.get(keyA)!.set(keyB, value);\n\n    return this;\n  }\n\n  get size() {\n    return this.toRefMap().size;\n  }\n\n  [Symbol.iterator](): IterableIterator<[[KeyA, KeyB], Value]> {\n    return this.toRefMap()[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[[KeyA, KeyB], Value]> {\n    return this.toRefMap().entries();\n  }\n\n  keys(): IterableIterator<[KeyA, KeyB]> {\n    return this.toRefMap().keys();\n  }\n\n  values(): IterableIterator<Value> {\n    return this.toRefMap().values();\n  }\n\n  toString(): string {\n    let lines = [];\n\n    for (let [key, value] of this) {\n      lines.push(`${key[0]}, ${key[1]}, ${value}`);\n    }\n\n    return lines.join(\"\\n\");\n  }\n  [Symbol.toStringTag]: string;\n}\n\nexport class PaintCanvas {\n  static DrawToCanvas(paintCanvas: PaintCanvas, canvas: HTMLCanvasElement) {\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n    paintCanvas.forEach(([x, y], color) => {\n      if (color === RGBColor.NO_COLOR) {\n        context.clearRect(x, y, 1, 1);\n        return;\n      }\n\n      context.fillStyle = color.toHex();\n      context.fillRect(x, y, 1, 1);\n    });\n  }\n\n  static AreDimensionsCompatible(\n    paintCanvas: PaintCanvas,\n    canvas: HTMLCanvasElement\n  ) {\n    const { width, height } = canvas;\n    const dimension = paintCanvas.dimension();\n\n    if (width !== height) {\n      return false;\n    }\n\n    if (dimension !== width) {\n      return false;\n    }\n\n    return true;\n  }\n\n  drawToCanvas() {\n    if (this.canvas === undefined) {\n      throw new Error(\"Cannot draw to canvas, no canvas set\");\n    }\n\n    PaintCanvas.DrawToCanvas(this, this.canvas);\n  }\n\n  tryDrawToCanvas(): boolean {\n    try {\n      this.drawToCanvas();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  setCanvas(canvas: HTMLCanvasElement) {\n    if (!PaintCanvas.AreDimensionsCompatible(this, canvas)) {\n      throw new RangeError(\n        `PaintCanvas and HTMLCanvas should be square and the same dimensions. Got PaintCanvas: ${this.dimension()} canvas: ${\n          canvas.width\n        }x${canvas.height}`\n      );\n    }\n\n    this.canvas = canvas;\n  }\n\n  hasCanvas(): boolean {\n    return this.canvas !== undefined;\n  }\n\n  getCanvas(): HTMLCanvasElement | undefined {\n    return this.canvas;\n  }\n\n  private pixelMap = new KeyPairMap<number, number, RGBColor | NoColor>();\n\n  getPixelMap() {\n    return this.pixelMap;\n  }\n\n  setPixelMap(map: KeyPairMap<number, number, RGBColor | \"NO_COLOR\">) {\n    if (map.size !== this.pixelMap.size) {\n      throw new RangeError(\n        \"Cannot set pixel map. Pixel maps are not the same dimensions\"\n      );\n    }\n    this.pixelMap = map.clone();\n  }\n\n  setPixelsFromImage(image: HTMLImageElement) {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n\n    canvas.width = image.naturalWidth;\n    canvas.height = image.naturalHeight;\n    context.drawImage(image, 0, 0);\n\n    this.setPixelsFromCanvas(canvas);\n  }\n\n  setPixelsFromCanvas(canvas: HTMLCanvasElement) {\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n\n    const xIntervals = canvas.width / this.dimension();\n    const yIntervals = canvas.height / this.dimension();\n    this.mutableMap(([x, y]) => {\n      const { data } = context.getImageData(\n        x * xIntervals,\n        y * yIntervals,\n        1,\n        1\n      );\n\n      const [r, g, b, a] = data;\n      const color = a === 0 ? RGBColor.NO_COLOR : new RGBColor(r, g, b);\n      return color;\n    });\n  }\n\n  clear() {\n    this.mutableMap(() => RGBColor.NO_COLOR);\n  }\n\n  setColorAt(x: number, y: number, color: RGBColor | NoColor) {\n    const isPixelInRange = this.pixelMap.has([x, y]);\n\n    if (!isPixelInRange) {\n      throw RangeError(`Pixel at ${x},${y} does not exist`);\n    }\n\n    this.pixelMap.set([x, y], color);\n  }\n\n  getColorAt(x: number, y: number): RGBColor | NoColor {\n    const maybeColor = this.pixelMap.get([x, y]);\n\n    if (maybeColor === undefined)\n      throw RangeError(`Pixel at ${x},${y} does not exist`);\n\n    return maybeColor;\n  }\n\n  map<T>(\n    callbackfn: (coord: [x: number, y: number], color: RGBColor | NoColor) => T\n  ): T[] {\n    const results = new Array<T>();\n    for (let [key, value] of this.pixelMap.entries()) {\n      const elementResult = callbackfn(key, value);\n      results.push(elementResult);\n    }\n\n    return results;\n  }\n\n  mutableMap(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => RGBColor | NoColor\n  ) {\n    for (let [key, value] of this.pixelMap.entries()) {\n      const result = callbackfn(key, value);\n      this.pixelMap.set(key, result);\n    }\n  }\n\n  forEach(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => void\n  ) {\n    for (let [key, value] of this.pixelMap.entries()) {\n      callbackfn(key, value);\n    }\n  }\n  private canvas?: HTMLCanvasElement;\n\n  constructor(dimension: number) {\n    for (let x = 0; x < dimension; x++) {\n      for (let y = 0; y < dimension; y++) {\n        const keys = [x, y] as [number, number];\n        const color = RGBColor.NO_COLOR;\n        this.pixelMap.set(keys, color);\n      }\n    }\n  }\n\n  dimension(): number {\n    return Math.sqrt(this.pixelMap.size);\n  }\n\n  touchEvent(event: React.TouchEvent<HTMLElement>, color: RGBColor | NoColor) {\n    const { quantX, quantY } = this.touchToCoords(event);\n\n    const currentColor = this.getColorAt(quantX, quantY);\n\n    if (color === \"NO_COLOR\" && currentColor === \"NO_COLOR\") {\n      return;\n    }\n\n    if (color === \"NO_COLOR\" && currentColor !== \"NO_COLOR\") {\n      this.setColorAt(quantX, quantY, color);\n      return;\n    }\n\n    if (color !== \"NO_COLOR\" && currentColor === \"NO_COLOR\") {\n      this.setColorAt(quantX, quantY, color);\n      return;\n    }\n\n    if (color !== \"NO_COLOR\" && currentColor !== \"NO_COLOR\") {\n      if (!RGBColor.Equals(color, currentColor)) {\n        this.setColorAt(quantX, quantY, color);\n      }\n    }\n  }\n\n  touchToCoords(event: React.TouchEvent<HTMLElement>) {\n    const { relativeX, relativeY } = getRelativeClickPosition(event);\n    const scaledX = relativeX * this.dimension();\n    const scaledY = relativeY * this.dimension();\n    const quantX = Math.floor(scaledX);\n    const quantY = Math.floor(scaledY);\n    return { quantX, quantY };\n  }\n}\nexport class UndoablePaintCanvas extends PaintCanvas {\n  static AreColorsEqual = (\n    colorA: RGBColor | NoColor,\n    colorB: RGBColor | NoColor\n  ) => {\n    if (colorA === \"NO_COLOR\" && colorB === \"NO_COLOR\") {\n      return true;\n    }\n\n    if (colorA === \"NO_COLOR\" && colorB !== \"NO_COLOR\") {\n      return false;\n    }\n\n    if (colorA !== \"NO_COLOR\" && colorB === \"NO_COLOR\") {\n      return false;\n    }\n\n    if (colorA !== \"NO_COLOR\" && colorB !== \"NO_COLOR\") {\n      if (RGBColor.Equals(colorA, colorB)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  undoBuffer: UndoRedoBuffer<KeyPairMap<number, number, RGBColor | \"NO_COLOR\">>;\n  constructor(dimension: number) {\n    super(dimension);\n\n    this.undoBuffer = new UndoRedoBuffer<\n      KeyPairMap<number, number, RGBColor | NoColor>\n    >(this.getPixelMap().clone());\n  }\n\n  mutableMap(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => RGBColor | NoColor\n  ) {\n    super.mutableMap(callbackfn);\n    this.undoBuffer.addCurrent(this.getPixelMap().clone());\n  }\n\n  setColorAt(x: number, y: number, color: RGBColor | NoColor) {\n    super.setColorAt(x, y, color);\n    this.undoBuffer.addCurrent(this.getPixelMap().clone());\n  }\n\n  undo() {\n    const undo = this.undoBuffer.undo();\n    this.setPixelMap(undo);\n  }\n\n  redo() {\n    const redo = this.undoBuffer.redoOne();\n    if (redo !== undefined) {\n      this.setPixelMap(redo);\n    }\n  }\n\n  fillWithColor(x: number, y: number, fillColor: RGBColor | NoColor) {\n    const startColor = this.getColorAt(x, y);\n\n    const visited = new KeyPairMap<number, number, boolean>();\n    this.getPixelMap()\n      .clone()\n      .forEach((color, [x, y]) => {\n        visited.set([x, y], false);\n      });\n\n    this.floodFill(x, y, fillColor, startColor, visited);\n    this.undoBuffer.addCurrent(this.getPixelMap().clone());\n  }\n\n  private floodFill(\n    x: number,\n    y: number,\n    fillColor: RGBColor | NoColor,\n    startColor: RGBColor | NoColor,\n    visited: KeyPairMap<number, number, boolean>\n  ) {\n    if (!this.cellExists(x, y)) return;\n    if (visited.get([x, y]) === true) return;\n\n    const cellColor = this.getColorAt(x, y);\n    if (!UndoablePaintCanvas.AreColorsEqual(cellColor, startColor)) return;\n\n    super.setColorAt(x, y, fillColor);\n    visited.set([x, y], true);\n\n    if (visited.get([x, y + 1]) === false)\n      this.floodFill(x, y + 1, fillColor, startColor, visited);\n\n    if (visited.get([x, y - 1]) === false)\n      this.floodFill(x, y - 1, fillColor, startColor, visited);\n\n    if (visited.get([x + 1, y]) === false)\n      this.floodFill(x + 1, y, fillColor, startColor, visited);\n\n    if (visited.get([x - 1, y]) === false)\n      this.floodFill(x - 1, y, fillColor, startColor, visited);\n  }\n\n  private cellExists = (x: number, y: number) => this.getPixelMap().has([x, y]);\n}\n\nexport class UndoBuffer<T> {\n  buffer: T[];\n\n  constructor(private base: T, private maxSize?: number) {\n    this.buffer = [base];\n  }\n\n  top() {\n    return this.buffer[this.buffer.length - 1] as T | undefined;\n  }\n\n  undo() {\n    this.buffer.pop();\n    const maybeReverseState = this.buffer[this.buffer.length - 1] as\n      | T\n      | undefined;\n    if (maybeReverseState) {\n      return maybeReverseState;\n    } else {\n      this.buffer = [this.base];\n      return this.base;\n    }\n  }\n\n  addCurrent(value: T) {\n    this.buffer.push(value);\n\n    if (this.maxSize && this.maxSize < this.buffer.length) {\n      this.buffer = this.buffer.slice(-this.maxSize - 2);\n    }\n  }\n\n  getUndoSize() {\n    return Math.max(this.buffer.length - 2, 0);\n  }\n\n  getBufferLength() {\n    return this.buffer.length;\n  }\n\n  clear() {\n    this.buffer = [];\n  }\n}\n\nexport class UndoRedoBuffer<T> extends UndoBuffer<T> {\n  private redoBuffer = new Array<T>();\n\n  undo(): T {\n    const maybeTop = this.top();\n    if (maybeTop !== undefined && this.getBufferLength() > 1) {\n      this.redoBuffer.push(maybeTop);\n    }\n\n    const previousPoint = super.undo();\n    return previousPoint;\n  }\n\n  addCurrent(value: T) {\n    this.redoBuffer = [];\n    super.addCurrent(value);\n  }\n\n  getUndoSize() {\n    return super.getUndoSize();\n  }\n\n  getRedoSize() {\n    return this.redoBuffer.length;\n  }\n\n  redoOne(): T | undefined {\n    const redid = this.redoBuffer.pop();\n    if (redid !== undefined) {\n      super.addCurrent(redid);\n    }\n\n    return redid;\n  }\n\n  clear() {\n    this.redoBuffer = [];\n    super.clear();\n  }\n}\n","import { TouchEvent } from \"react\";\n\nexport function getRelativeClickPosition(\n  event: TouchEvent<HTMLElement>\n): { relativeX: number; relativeY: number } {\n  const screenX = event.changedTouches[0].clientX;\n  const screenY = event.changedTouches[0].clientY;\n  const rect = (event.target as HTMLElement).getBoundingClientRect();\n\n  const clip = (value: number, min: number, max: number) =>\n    Math.min(max, Math.max(value, min));\n\n  const clippedX = clip(screenX - rect.left, 0, rect.width - 1);\n  const clippedY = clip(screenY - rect.top, 0, rect.height - 1);\n\n  const relativeX = clippedX / rect.width;\n  const relativeY = clippedY / rect.height;\n  return { relativeX: relativeX, relativeY: relativeY };\n}\n","/* eslint-disable jsx-a11y/anchor-has-content */\nimport { Button } from \"grommet\";\nimport { Share } from \"grommet-icons\";\nimport { useRef } from \"react\";\n\nexport const SaveButton = ({ canvas }: { canvas: HTMLCanvasElement }) => {\n  const anchorRef = useRef<HTMLAnchorElement>(null);\n  const onShareClick = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    const fullScaleCanvas = drawToHigherResolutionCanvas(canvas);\n\n    try {\n      const blob = await new Promise<Blob>((resolve, reject) => {\n        fullScaleCanvas.toBlob((maybeBlob) => {\n          if (maybeBlob) {\n            resolve(maybeBlob);\n          } else {\n            reject(new Error(\"Unable to convert canvas to blob\"));\n          }\n        }, \"image/png\");\n      });\n\n      if (document.location.protocol !== \"https:\") {\n        throw new Error(\"Could not share. Page is not HTTPS.\");\n      }\n\n      if (navigator.share === undefined) {\n        throw new Error(\"Share unsupported in this browser\");\n      }\n\n      const files = Object.freeze([\n        new File([blob], \"my-pixel-art.png\", { type: blob.type }),\n      ]);\n\n      if (!(navigator.canShare && navigator.canShare({ files }))) {\n        throw new Error(\"File sharing unsupported in this browser\");\n      }\n\n      await navigator\n        .share({\n          title: \"My pixel art\",\n          files,\n        })\n        .catch((error: Error) => {\n          if (error.name === \"AbortError\") {\n            console.debug(\"User cancelled share\");\n            return;\n          }\n          throw error;\n        });\n    } catch (error) {\n      console.debug(\"Could not use share api, using image download\");\n      console.debug(error);\n      const image = fullScaleCanvas.toDataURL(\"image/png\");\n      if (anchorRef.current) {\n        anchorRef.current.href = image;\n        anchorRef.current.click();\n      }\n    }\n  };\n  return (\n    <>\n      <Button icon={<Share />} onClick={onShareClick} focusIndicator={false} />\n      <a\n        ref={anchorRef}\n        href=\"/\"\n        style={{ display: \"none\" }}\n        download=\"my-pixel-art.png\"\n      />\n    </>\n  );\n};\n\nfunction drawToHigherResolutionCanvas(canvas: HTMLCanvasElement) {\n  const fullScaleCanvas = document.createElement(\"canvas\");\n  fullScaleCanvas.width = 1024;\n  fullScaleCanvas.height = 1024;\n  const context = fullScaleCanvas.getContext(\"2d\")!;\n  context.imageSmoothingEnabled = false;\n  context.drawImage(\n    canvas,\n    0,\n    0,\n    fullScaleCanvas.width,\n    fullScaleCanvas.height\n  );\n  return fullScaleCanvas;\n}\n","import { Box, Grid, Button } from \"grommet\";\nimport { Actions, Add } from \"grommet-icons\";\nimport { SaveButton } from \"./components/SaveButton\";\nexport const Footer = ({\n  canvas,\n  onAddButtonClicked,\n  setSettingsMenuShown,\n  gridArea,\n}: {\n  canvas: HTMLCanvasElement;\n  onAddButtonClicked: () => void;\n  setSettingsMenuShown: (value: boolean) => void;\n} & { gridArea: string }) => {\n  return (\n    <Box gridArea={gridArea} pad={{ left: \"small\", right: \"small\" }}>\n      <Grid\n        columns={{\n          count: 3,\n          size: [\"auto\", \"auto\", \"auto\"],\n        }}\n        fill\n        gap=\"small\"\n      >\n        <Box align=\"start\">\n          <Button\n            icon={<Actions />}\n            onClick={() => setSettingsMenuShown(true)}\n            focusIndicator={false}\n          />\n        </Box>\n        <Box align=\"center\">\n          <Button\n            icon={<Add />}\n            onClick={onAddButtonClicked}\n            focusIndicator={false}\n          />\n        </Box>\n        <Box align=\"end\">{<SaveButton canvas={canvas} />}</Box>\n      </Grid>\n    </Box>\n  );\n};\n","import { Select } from \"grommet\";\nimport { ReactElement } from \"react\";\n\nconst validDimensions = [\n  { value: 1, label: \"1x1\" },\n  { value: 8, label: \"8x8\" },\n  { value: 10, label: \"10x10\" },\n  { value: 12, label: \"12x12\" },\n  { value: 14, label: \"14x14\" },\n  { value: 16, label: \"16x16\" },\n  { value: 18, label: \"18x18\" },\n  { value: 20, label: \"20x20\" },\n  { value: 22, label: \"22x22\" },\n  { value: 24, label: \"24x24\" },\n] as const;\n\nconst labelToValue = {\n  \"1x1\": 1,\n  \"8x8\": 8,\n  \"10x10\": 10,\n  \"12x12\": 12,\n  \"14x14\": 14,\n  \"16x16\": 16,\n  \"18x18\": 18,\n  \"20x20\": 20,\n  \"22x22\": 22,\n  \"24x24\": 24,\n} as const;\n\nconst valueToLabel = {\n  1: \"1x1\",\n  8: \"8x8\",\n  10: \"10x10\",\n  12: \"12x12\",\n  14: \"14x14\",\n  16: \"16x16\",\n  18: \"18x18\",\n  20: \"20x20\",\n  22: \"22x22\",\n  24: \"24x24\",\n} as const;\n\nconst options = [\n  \"1x1\",\n  \"8x8\",\n  \"10x10\",\n  \"12x12\",\n  \"14x14\",\n  \"16x16\",\n  \"18x18\",\n  \"20x20\",\n  \"22x22\",\n  \"24x24\",\n];\n\nexport type ValidDimensions = typeof validDimensions[number][\"value\"];\n\nexport const DimensionPicker = ({\n  dimension,\n  onDimensionChange,\n}: {\n  dimension: ValidDimensions;\n  onDimensionChange: (dimension: ValidDimensions) => void;\n}): ReactElement => {\n  return (\n    <Select\n      name=\"Select Dimensions\"\n      placeholder=\"8x8\"\n      value={valueToLabel[dimension]}\n      options={options}\n      onChange={({ option }: { option: keyof typeof labelToValue }) =>\n        onDimensionChange(labelToValue[option])\n      }\n    />\n  );\n};\n","import { Box, Button, Text } from \"grommet\";\nimport { useRef, useState } from \"react\";\n\nexport const LoadButton = ({\n  setLoadedImage,\n}: {\n  setLoadedImage: (image: HTMLImageElement) => void;\n}) => {\n  const ref = useRef<HTMLInputElement>(null);\n  const [imageName, setImageName] = useState(\"No File Chosen\");\n  return (\n    <Box direction=\"row\" gap=\"small\">\n      <Button\n        label=\"Choose File\"\n        onClick={() => {\n          const input = ref.current;\n          if (!input) return;\n          input.click();\n        }}\n      />\n      <Text\n        alignSelf=\"center\"\n        onClick={() => {\n          const input = ref.current;\n          if (!input) return;\n          input.click();\n        }}\n      >\n        {imageName}\n      </Text>\n      <input\n        ref={ref}\n        style={{ display: \"none\" }}\n        onChange={async (event) => {\n          const imagePromise = new Promise<HTMLImageElement>(\n            (resolve, reject) => {\n              if (!event.target.files || !event.target.files[0]) return;\n              const imageUrl = URL.createObjectURL(event.target.files![0]);\n              const image = new Image();\n              image.src = imageUrl;\n              image.onload = () => resolve(image);\n            }\n          );\n          const image = await imagePromise;\n          setImageName(event.target.files?.[0]?.name || \"No File Chosen\");\n          setLoadedImage(image);\n        }}\n        type=\"file\"\n        accept=\"image/*\"\n      />\n    </Box>\n  );\n};\n","import { Box, Button, Grid, Text } from \"grommet\";\nimport React, { useEffect, useState } from \"react\";\nimport { DimensionPicker, ValidDimensions } from \"./components/DimensionPicker\";\nimport { LoadButton } from \"./components/LoadButton\";\nimport { Modal } from \"./Modal\";\n\nexport const NewPageModal = ({\n  currentDimension,\n  onCancel,\n  onCreateNew,\n}: {\n  currentDimension: ValidDimensions;\n  onCancel: () => void;\n  onCreateNew: (\n    dimension: ValidDimensions,\n    loadedImage?: HTMLImageElement\n  ) => void;\n}) => {\n  const [loadedImage, setLoadedImage] = useState<HTMLImageElement>();\n  const [dimension, setDimension] = useState<ValidDimensions>(currentDimension);\n\n  useEffect(() => {\n    setDimension(currentDimension);\n  }, [currentDimension]);\n\n  return (\n    <Modal onClose={onCancel} heading=\"New Drawing\">\n      <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n        <Text>Canvas Dimensions</Text>\n        <DimensionPicker\n          onDimensionChange={setDimension}\n          dimension={dimension}\n        />\n      </Box>\n      <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n        <Text>Upload Image (optional)</Text>\n        <LoadButton setLoadedImage={setLoadedImage} />\n      </Box>\n\n      <Grid\n        columns={{ count: 2, size: [\"auto\", \"auto\"] }}\n        gap=\"small\"\n        pad={{ top: \"medium\", bottom: \"small\" }}\n      >\n        <Button label=\"Cancel\" onClick={onCancel} />\n\n        <Button\n          primary\n          label=\"Create New\"\n          onClick={() => onCreateNew(dimension, loadedImage)}\n        />\n      </Grid>\n    </Modal>\n  );\n};\n","export const paletteColorDictionary: {\n  [key: string]: string[];\n} = {\n  c64: [\n    \"#000000\",\n    \"#FFFFFF\",\n    \"#880000\",\n    \"#AAFFEE\",\n    \"#DD8855\",\n    \"#664400\",\n    \"#FF7777\",\n    \"#333333\",\n    \"#CC44CC\",\n    \"#00CC55\",\n    \"#0000AA\",\n    \"#EEEE77\",\n    \"#777777\",\n    \"#AAFF66\",\n    \"#0088FF\",\n    \"#BBBBBB\",\n  ],\n  cga: [\n    \"#000000\",\n    \"#0000AA\",\n    \"#00AA00\",\n    \"#00AAAA\",\n    \"#555555\",\n    \"#5555FF\",\n    \"#55FF55\",\n    \"#55FFFF\",\n    \"#AA0000\",\n    \"#AA00AA\",\n    \"#AA5500\",\n    \"#AAAAAA\",\n    \"#FF5555\",\n    \"#FF55FF\",\n    \"#FFFF55\",\n    \"#FFFFFF\",\n  ],\n  teletext: [\n    \"#000000\",\n    \"#ff0000\",\n    \"#ffff00\",\n    \"#00ff00\",\n    \"#00ffff\",\n    \"#0000ff\",\n    \"#ff00ff\",\n    \"#ffffff\",\n  ],\n};\n\nexport const paletteNameDictionary = {\n  c64: \"Commodore 64\",\n  cga: \"DOS CGA/ EGA\",\n  teletext: \"Teletext\",\n} as const;\n\nexport type AvailablePalettes = keyof typeof paletteNameDictionary;\n","import { Select } from \"grommet\";\nimport { ReactElement } from \"react\";\nimport { AvailablePalettes, paletteNameDictionary } from \"./PaletteDictionary\";\n\nconst options = [\"Commodore 64\", \"DOS CGA/ EGA\", \"Teletext\"];\n\nconst labelToValue = {\n  \"Commodore 64\": \"c64\",\n  \"DOS CGA/ EGA\": \"cga\",\n  Teletext: \"teletext\",\n} as const;\n\nexport const PalettePicker = ({\n  palette,\n  onPaletteChange,\n}: {\n  palette: AvailablePalettes;\n  onPaletteChange: (palette: AvailablePalettes) => void;\n}): ReactElement => {\n  const possiblePalettes = paletteNameDictionary;\n  return (\n    <Select\n      name=\"Select Palette\"\n      placeholder={possiblePalettes.c64}\n      value={paletteNameDictionary[palette]}\n      options={options}\n      onChange={({ option }: { option: keyof typeof labelToValue }) =>\n        onPaletteChange(labelToValue[option])\n      }\n    />\n  );\n};\n","import { Box, Button } from \"grommet\";\nimport { Pin } from \"grommet-icons\";\nimport { useState } from \"react\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { useLongPress } from \"./drivers/useLongPress\";\nimport { Modal } from \"./Modal\";\nimport { AvailablePalettes, paletteColorDictionary } from \"./PaletteDictionary\";\nimport { PalettePicker } from \"./PalettePicker\";\nexport const PaletteModal = ({\n  onCancel,\n  setColor,\n  palette = \"cga\",\n  pinnedColors = [],\n  setPinnedColors,\n  setPalette,\n}: {\n  onCancel: () => void;\n  setColor: (color: RGBColor) => void;\n  palette?: AvailablePalettes;\n  pinnedColors?: RGBColor[];\n  setPalette?: (palette: AvailablePalettes) => void;\n  setPinnedColors?: (colors: RGBColor[]) => void;\n}) => {\n  const [innerPalette, setInnerPalette] = useState<AvailablePalettes>(palette);\n  const paletteColors = paletteColorDictionary[innerPalette];\n  const selectedPalette = paletteColors.map(RGBColor.fromHexString);\n\n  const onPaletteChange = (palette: AvailablePalettes) => {\n    setInnerPalette(palette);\n    setPalette?.(palette);\n  };\n\n  const { onPressDown, onPressUp } = useLongPress(\n    (event) => {\n      if (!setPinnedColors) return;\n      const index = getButtonIndex(event);\n      if (index === undefined) return;\n\n      const color = selectedPalette[index];\n\n      const isPinned = !!pinnedColors.find((pinned) =>\n        RGBColor.Equals(pinned, color)\n      );\n\n      if (isPinned) {\n        const currentPinnedColors = [...pinnedColors].filter(\n          (pinned) => !RGBColor.Equals(color, pinned)\n        );\n        setPinnedColors(currentPinnedColors);\n      } else {\n        const currentPinnedColors = [...pinnedColors];\n        currentPinnedColors.push(color);\n        setPinnedColors(currentPinnedColors);\n      }\n    },\n    500,\n    (event) => {\n      if (event === undefined) return;\n      event.preventDefault();\n      const maybeIndex = getButtonIndex(event);\n      if (maybeIndex === undefined) return;\n\n      const color = selectedPalette[maybeIndex];\n      setColor(color);\n      onCancel();\n    }\n  );\n  return (\n    <Modal onClose={onCancel} heading={\"Palette\"}>\n      <Box fill pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n        <Box\n          direction=\"row\"\n          wrap\n          justify=\"between\"\n          alignSelf=\"center\"\n          onTouchStart={onPressDown}\n          onTouchEnd={onPressUp}\n        >\n          {Object.values(selectedPalette).map((color, index) => {\n            const isPinned = !!pinnedColors.find((pinned) =>\n              RGBColor.Equals(pinned, color)\n            );\n            return (\n              <Box\n                key={index}\n                height=\"xsmall\"\n                width=\"xsmall\"\n                pad={{ bottom: \"xsmall\" }}\n              >\n                <Button\n                  primary\n                  fill=\"vertical\"\n                  size=\"large\"\n                  key={index}\n                  data-index={index}\n                  color={color.toHex()}\n                  icon={isPinned ? <Pin /> : undefined}\n                  style={{\n                    borderRadius: \"0\",\n                    border: \"none\",\n                  }}\n                ></Button>\n              </Box>\n            );\n          })}\n        </Box>\n      </Box>\n      <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n        <PalettePicker palette={palette} onPaletteChange={onPaletteChange} />\n      </Box>\n    </Modal>\n  );\n};\nfunction getButtonIndex(event: React.TouchEvent): number | undefined {\n  const maybeIndexString = (event.target as HTMLButtonElement).dataset.index;\n  if (!maybeIndexString) return undefined;\n\n  return parseInt(maybeIndexString, 10);\n}\n","import { useRef } from \"react\";\n\nexport const useLongPress = (\n  onLongPressComplete: (event: React.TouchEvent<HTMLDivElement>) => void,\n  duration: number,\n  onLongPressCancel?: (\n    event: React.TouchEvent<HTMLDivElement> | undefined\n  ) => void\n) => {\n  const timeout = useRef<NodeJS.Timeout>();\n  const wasLongPress = useRef(false);\n\n  const cancelTimeout = () => {\n    timeout.current && clearTimeout(timeout.current);\n    timeout.current = undefined;\n  };\n\n  const onPressDown = (event: React.TouchEvent<HTMLDivElement>) => {\n    timeout.current = setTimeout(() => {\n      wasLongPress.current = true;\n      onLongPressComplete(event);\n      cancelTimeout();\n    }, duration);\n  };\n\n  const onPressUp = (event: React.TouchEvent<HTMLDivElement>) => {\n    if (timeout.current === undefined) return;\n    cancelTimeout();\n    onLongPressCancel?.(event);\n  };\n\n  return { onPressDown, onPressUp, wasLongPress };\n};\n","import { Button } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { PaletteModal } from \"./PaletteModal\";\nimport { BackgroundColorData } from \"./Tools\";\n\nexport const BackgroundColorForm = ({\n  color,\n  onFormComplete,\n}: {\n  color?: RGBColor;\n  onFormComplete: (data: BackgroundColorData) => void;\n}) => {\n  const [innerColor, setColor] = useState<RGBColor | undefined>(color);\n  const [isPaletteModalShown, setPaletteMenuShown] = useState(false);\n\n  useEffect(() => {\n    if (!innerColor || (color && RGBColor.Equals(innerColor, color))) return;\n    onFormComplete({ type: \"color\", color: innerColor });\n  }, [color, innerColor, onFormComplete]);\n\n  return (\n    <>\n      <Button\n        primary\n        color={innerColor?.toHex()}\n        label={\"Select color\"}\n        onClick={() => setPaletteMenuShown(true)}\n      />\n      {isPaletteModalShown && (\n        <PaletteModal\n          onCancel={() => setPaletteMenuShown(false)}\n          setColor={setColor}\n        />\n      )}\n    </>\n  );\n};\n","import { RGBColor } from \"./drivers/Color\";\n\nexport type Tools = \"paint\" | \"dropper\" | \"eraser\" | \"fill\";\nexport type Brushes = \"fill\" | \"paint\";\n\nexport type Controls =\n  | \"undo\"\n  | \"redo\"\n  | \"paint\"\n  | \"dropper\"\n  | \"eraser\"\n  | \"fill\"\n  | \"grid\"\n  | \"trash\"\n  | \"history\"\n  | \"palette\"\n  | \"pinned\";\n\nexport const backgroundTypes: Backgrounds[\"type\"][] = [\n  \"checkerboard\",\n  \"color\",\n  \"image\",\n];\nexport interface BackgroundImageData {\n  type: \"image\";\n  image: HTMLImageElement;\n  size: \"contain\" | \"cover\";\n  color: RGBColor;\n}\n\nexport const backgroundBackgroundImageSizes: BackgroundImageData[\"size\"][] = [\n  \"contain\",\n  \"cover\",\n];\n\nexport type BackgroundColorData = {\n  type: \"color\";\n  color: RGBColor;\n};\n\nexport type Backgrounds =\n  | { type: \"checkerboard\" }\n  | BackgroundColorData\n  | BackgroundImageData;\n","import { Select, Image } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { LoadButton } from \"./components/LoadButton\";\nimport {\n  backgroundBackgroundImageSizes,\n  BackgroundColorData,\n  BackgroundImageData,\n  Backgrounds,\n} from \"./Tools\";\nimport { BackgroundColorForm } from \"./BackgroundColorForm\";\n\nexport const BackgroundImageForm = ({\n  onFormComplete,\n  background,\n}: {\n  background: Backgrounds;\n  onFormComplete: (data: BackgroundImageData) => void;\n}) => {\n  const [imageSize, setImageSize] = useState<BackgroundImageData[\"size\"]>(\n    (background as Partial<BackgroundImageData>).size || \"cover\"\n  );\n  const [image, setImage] = useState<BackgroundImageData[\"image\"] | undefined>(\n    (background as Partial<BackgroundImageData>).image || undefined\n  );\n  const [color, setColor] = useState<BackgroundImageData[\"color\"] | undefined>(\n    (background as Partial<BackgroundColorData>).color\n  );\n\n  useEffect(() => {\n    if (!image || !color) return;\n\n    onFormComplete({ type: \"image\", image, size: imageSize, color });\n  }, [color, image, imageSize, onFormComplete]);\n\n  return (\n    <>\n      <LoadButton setLoadedImage={setImage} />\n      {image && (\n        <Image\n          style={{ backgroundColor: color?.toHex() }}\n          src={image.src}\n          fit={imageSize}\n        />\n      )}\n\n      <Select\n        value={imageSize}\n        options={backgroundBackgroundImageSizes}\n        onChange={({ option }: { option: BackgroundImageData[\"size\"] }) =>\n          setImageSize(option)\n        }\n      />\n\n      <BackgroundColorForm\n        color={color}\n        onFormComplete={({ color }) => setColor(color)}\n      />\n    </>\n  );\n};\n","import { Button, CheckBox, Grid, Select } from \"grommet\";\nimport { useState } from \"react\";\nimport { BackgroundColorForm } from \"./BackgroundColorForm\";\nimport { BackgroundImageForm } from \"./BackgroundImageForm\";\nimport { Modal } from \"./Modal\";\nimport { BackgroundColorData, Backgrounds, backgroundTypes } from \"./Tools\";\n\ntype SettingsData = {\n  backgroundData: Backgrounds;\n  isDarkMode: boolean;\n  isFeedbackOn: boolean;\n};\n\nexport const SettingsModal = ({\n  onCancel,\n  onSave,\n  setDarkMode,\n  isDarkMode,\n  isFeedbackOn,\n  background,\n}: {\n  isDarkMode: boolean;\n  background: Backgrounds;\n  onCancel: () => void;\n  onSave: (settingsData: SettingsData) => void;\n  setDarkMode: (value: boolean) => void;\n  isFeedbackOn: boolean;\n}) => {\n  const [backgroundType, setBackgroundType] = useState<Backgrounds[\"type\"]>(\n    background.type\n  );\n\n  const [backgroundData, setBackgroundData] = useState<Backgrounds | undefined>(\n    background\n  );\n\n  const [innerIsFeedbackOn, setFeedbackOn] = useState(isFeedbackOn);\n\n  return (\n    <Modal onClose={onCancel} heading={\"Settings\"}>\n      <CheckBox\n        toggle\n        onChange={(event) => setDarkMode(event.target.checked)}\n        label={\"Dark Mode\"}\n        checked={isDarkMode}\n      />\n      <CheckBox\n        toggle\n        onChange={(event) => setFeedbackOn(event.target.checked)}\n        label={\"Show feedback\"}\n        checked={innerIsFeedbackOn}\n      />\n\n      <Select\n        value={backgroundType}\n        options={backgroundTypes}\n        onChange={({ option }: { option: Backgrounds[\"type\"] }) => {\n          setBackgroundType(option);\n          switch (backgroundData?.type) {\n            case \"checkerboard\":\n              switch (option) {\n                case \"color\":\n                  setBackgroundData(undefined);\n                  break;\n                case \"image\":\n                  setBackgroundData(undefined);\n                  break;\n              }\n              break;\n            case \"color\":\n              switch (option) {\n                case \"checkerboard\":\n                  setBackgroundData({ type: \"checkerboard\" });\n                  break;\n                case \"image\":\n                  setBackgroundData(undefined);\n                  break;\n              }\n              break;\n            case \"image\":\n              switch (option) {\n                case \"checkerboard\":\n                  setBackgroundData({ type: \"checkerboard\" });\n                  break;\n                case \"color\":\n                  setBackgroundData({\n                    type: \"color\",\n                    color: backgroundData.color,\n                  });\n                  break;\n              }\n              break;\n          }\n        }}\n      />\n\n      {backgroundType === \"image\" && (\n        <BackgroundImageForm\n          background={(backgroundData || background) as Backgrounds}\n          onFormComplete={setBackgroundData}\n        />\n      )}\n\n      {backgroundType === \"color\" && (\n        <BackgroundColorForm\n          color={\n            (backgroundData as Partial<BackgroundColorData> | undefined)?.color\n          }\n          onFormComplete={(data) => {\n            setBackgroundData(data);\n          }}\n        />\n      )}\n      <Grid\n        columns={{ count: 2, size: [\"auto\", \"auto\"] }}\n        gap=\"small\"\n        pad={{ top: \"medium\", bottom: \"small\" }}\n      >\n        <Button label=\"Cancel\" onClick={onCancel} />\n\n        <Button\n          primary\n          label=\"Save\"\n          disabled={backgroundData === undefined}\n          onClick={() => {\n            onSave({\n              backgroundData: backgroundData! as Backgrounds,\n              isDarkMode,\n              isFeedbackOn: innerIsFeedbackOn,\n            });\n          }}\n        />\n      </Grid>\n    </Modal>\n  );\n};\n","import { IconProps } from \"grommet-icons\";\nimport { StyledIcon } from \"grommet-icons/StyledIcon\";\n\nexport const DropperIcon = (props: IconProps) => (\n  <StyledIcon viewBox=\"0 0 6.35 6.35\" a11yTitle=\"Dropper\" {...props}>\n    <g fill=\"none\" stroke=\"#000\" strokeWidth=\".52917\">\n      <path d=\"m5.5002.60932c-.20131-.12441-.4432-.27888-.67352-.22451-.30901.072947-.38019.55202-.67352.67352-.13828.057276-.44901 0-.44901 0l-.22451.22451.22451.22451-2.9186 2.9186-.44901 1.347.22451.22451 1.347-.44901 2.9186-2.9186.22451.22451.22451-.22451s-.057276-.31073 1e-7-.44901c.1215-.29333.60057-.36451.67352-.67352.054371-.23032-.10009-.47221-.22451-.67352-.05564-.090027-.13448-.16887-.22451-.22451z\" />\n      <path d=\"m3.7042 1.5073 1.1225 1.1225\" />\n    </g>\n  </StyledIcon>\n);\n","import { IconProps } from \"grommet-icons\";\nimport { StyledIcon } from \"grommet-icons/StyledIcon\";\n\nexport const PaletteIcon = (props: IconProps) => (\n  <StyledIcon viewBox=\"0 0 6.35 6.35\" a11yTitle=\"Palette\" {...props}>\n    <path\n      xmlns=\"http://www.w3.org/2000/svg\"\n      d=\"m5.926 3.1543c-.037745.39288-.36536.56457-.83971.54908-.38933-.01271-1.2873-.15741-1.475.24331-.22247.47492.58533.95042.5725 1.4362-.011288.42757-.61548.57263-1.0208.57263-1.526 0-2.763-1.2542-2.763-2.8012 2e-8-1.5471 1.237-2.8012 2.763-2.8012 1.526 0 2.911 1.2612 2.763 2.8012z\"\n      fillOpacity=\"0\"\n      strokeWidth=\".52917\"\n    />\n    <circle cx=\"1.5769\" cy=\"3.5063\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"1.8923\" cy=\"2.1661\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"3.8408\" cy=\"1.7492\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"2.7456\" cy=\"1.4877\" r=\"0.3784252\" stroke=\"none\" />\n  </StyledIcon>\n);\n","import { Button, ButtonProps } from \"grommet\";\nexport const HighlightableButton = ({\n  onClick,\n  isHighlighted,\n  ...props\n}: {\n  onClick: () => void;\n  isHighlighted: boolean;\n} & ButtonProps &\n  Omit<JSX.IntrinsicElements[\"button\"], \"color\">) => {\n  return (\n    <Button\n      onClick={onClick}\n      style={{\n        borderRadius: \"18px\",\n        boxShadow: isHighlighted ? \"0 0 2px 2px lightgreen\" : \"none\",\n      }}\n      {...props}\n    />\n  );\n};\n","import { Box, Button, Grid } from \"grommet\";\nimport {\n  Brush,\n  Erase,\n  Grid as GridIcon,\n  History,\n  Pin,\n  Redo,\n  Trash,\n  Undo,\n  Paint,\n} from \"grommet-icons\";\nimport { DropperIcon } from \"./components/DropperIcon\";\nimport { PaletteIcon } from \"./components/PaletteIcon\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { HighlightableButton } from \"./HighlightableButton\";\nimport { Controls, Tools } from \"./Tools\";\n\nexport const ControlsBanner = ({\n  onToolChange,\n  onPickerModeClick,\n  onUndoClick,\n  onRedoClick,\n  onPaletteButtonClick,\n  onGridButtonClick,\n  onTrashClick,\n  onControlsClick,\n  isGridShown,\n  color,\n  pickerMode,\n  tool,\n}: {\n  onPickerModeClick: (pickerMode: \"history\" | \"pinned\") => void;\n  onUndoClick: () => void;\n  onRedoClick: () => void;\n  onPaletteButtonClick: () => void;\n  onGridButtonClick: () => void;\n  onTrashClick: () => void;\n  onToolChange: (tool: Tools) => void;\n  onControlsClick: (control: Controls) => void;\n  pickerMode: \"history\" | \"pinned\";\n  tool: Tools;\n  isGridShown: boolean;\n  color: RGBColor;\n}) => {\n  const callBefore = <T extends any>(\n    callback: (arg?: T) => void,\n    control: Controls\n  ) => {\n    return (arg?: T) => {\n      onControlsClick(control);\n      if (arg) {\n        callback(arg);\n      } else {\n        callback();\n      }\n    };\n  };\n\n  return (\n    <Grid\n      fill={\"horizontal\"}\n      columns={[\"auto\", \"auto\"]}\n      rows={[\"36px\", \"36px\"]}\n      areas={[\n        { name: \"left-top\", start: [0, 0], end: [0, 0] },\n        { name: \"left-bot\", start: [0, 1], end: [0, 1] },\n        { name: \"right-top\", start: [1, 0], end: [1, 0] },\n        { name: \"right-bot\", start: [1, 1], end: [1, 1] },\n      ]}\n      gap=\"xsmall\"\n      pad={{ bottom: \"small\" }}\n    >\n      <Box gridArea=\"left-top\" direction=\"row\" gap=\"xsmall\">\n        <HighlightableButton\n          primary\n          onClick={callBefore(() => onToolChange(\"paint\"), \"paint\")}\n          isHighlighted={tool === \"paint\"}\n          icon={<Brush />}\n          color={color.toHex()}\n        />\n        <HighlightableButton\n          onClick={callBefore(() => onToolChange(\"eraser\"), \"eraser\")}\n          isHighlighted={tool === \"eraser\"}\n          icon={<Erase />}\n        />\n        <HighlightableButton\n          primary\n          onClick={callBefore(() => onToolChange(\"fill\"), \"fill\")}\n          isHighlighted={tool === \"fill\"}\n          icon={<Paint />}\n          color={color.toHex()}\n        />\n        <Button\n          onClick={callBefore(onPaletteButtonClick, \"palette\")}\n          icon={<PaletteIcon />}\n          focusIndicator={false}\n        />\n        <HighlightableButton\n          onClick={callBefore(() => onToolChange(\"dropper\"), \"dropper\")}\n          isHighlighted={tool === \"dropper\"}\n          icon={<DropperIcon />}\n        />\n      </Box>\n      <Box gridArea=\"left-bot\" direction=\"row\">\n        <HighlightableButton\n          icon={<History />}\n          onClick={callBefore(() => onPickerModeClick(\"history\"), \"history\")}\n          isHighlighted={pickerMode === \"history\"}\n        />\n        <HighlightableButton\n          icon={<Pin />}\n          onClick={callBefore(() => onPickerModeClick(\"pinned\"), \"pinned\")}\n          isHighlighted={pickerMode === \"pinned\"}\n        />\n      </Box>\n      <Box gridArea=\"right-top\" direction=\"row\" justify=\"end\">\n        <Button\n          size=\"small\"\n          icon={<Undo />}\n          onClick={callBefore(onUndoClick, \"undo\")}\n          focusIndicator={false}\n        />\n        <Button\n          icon={<Redo />}\n          onClick={callBefore(onRedoClick, \"redo\")}\n          focusIndicator={false}\n        />\n      </Box>\n      <Box gridArea=\"right-bot\" direction=\"row\" justify=\"end\">\n        <Button\n          onClick={callBefore(onTrashClick, \"trash\")}\n          icon={<Trash />}\n          focusIndicator={false}\n        />\n        <HighlightableButton\n          onClick={callBefore(onGridButtonClick, \"grid\")}\n          isHighlighted={isGridShown}\n          icon={<GridIcon />}\n        />\n      </Box>\n    </Grid>\n  );\n};\n","import { useEffect } from \"react\";\n\nexport const useTimeout = (callback: Function, delay: number) => {\n  useEffect(() => {\n    const id = setTimeout(callback, delay);\n    return () => clearTimeout(id);\n  }, [callback, delay]);\n};\n","import { Layer, Text, Box } from \"grommet\";\nimport { Controls } from \"./Tools\";\nimport { useTimeout } from \"./useTimeout\";\n\nimport \"./styles/ControlsFeedback.css\";\nimport { useState } from \"react\";\n\nconst controlToFeedback: Record<Controls, string> = {\n  dropper: \"Dropper\",\n  eraser: \"Eraser\",\n  fill: \"Fill\",\n  grid: \"Grid\",\n  history: \"Recent colors\",\n  paint: \"Pixel brush\",\n  palette: \"Palette\",\n  pinned: \"Pinned colors\",\n  redo: \"Redo\",\n  undo: \"Undo\",\n  trash: \"Clear canvas\",\n};\nexport const ControlsFeedback = ({\n  onClose,\n  control,\n}: {\n  onClose: () => void;\n  control: Controls;\n}) => {\n  const [opacity, setOpacity] = useState(1);\n  useTimeout(onClose, 800);\n  useTimeout(() => setOpacity(0), 400);\n  return (\n    <Layer\n      position=\"center\"\n      responsive={false}\n      onClickOutside={onClose}\n      modal={false}\n      animation=\"none\"\n      className=\"ControlsFeedback\"\n      style={{ opacity, backgroundColor: \"rgba(255, 255, 255, 0.6)\" }}\n      \n    >\n      <Box pad={{ horizontal: \"small\", vertical: \"xsmall\" }}>\n        <Text style={{ color: \"black\" }}>{controlToFeedback[control]}</Text>\n      </Box>\n    </Layer>\n  );\n};\n","import { Grid, grommet, Grommet, Header, Main, ThemeType } from \"grommet\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { BodyColorPicker } from \"./BodyColorPicker\";\nimport { CanvasStack } from \"./CanvasStack\";\nimport { ValidDimensions } from \"./components/DimensionPicker\";\nimport { ConfirmModal, ConfirmModalProps } from \"./ConfirmModal\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { UndoablePaintCanvas } from \"./drivers/UndoablePaintCanvas\";\nimport { Footer } from \"./Footer\";\nimport { NewPageModal } from \"./NewPageModal\";\nimport { AvailablePalettes } from \"./PaletteDictionary\";\nimport { PaletteModal } from \"./PaletteModal\";\nimport { SettingsModal } from \"./SettingsModal\";\nimport { Backgrounds, Brushes, Controls, Tools } from \"./Tools\";\nimport { ControlsBanner } from \"./ControlsBanner\";\nimport { ControlsFeedback } from \"./ControlsFeedback\";\nimport { deepMerge } from \"grommet/utils\";\n\nconst customTheme: ThemeType = {\n  icon: {\n    size: { medium: \"20px\" },\n  },\n  global: { edgeSize: { small: \"8px\" } },\n};\n\nconst mergedTheme = deepMerge(grommet, customTheme);\n\nconst defaultPalette = \"cga\";\nconst defaultColor = \"#5555ff\";\n\nconst App = () => {\n  const [pixelDimensions, setPixelDimensions] = useState<ValidDimensions>(16);\n  const [color, setColor] = useState<RGBColor>(\n    RGBColor.fromHexString(defaultColor)\n  );\n\n  const [confirmModalParameters, createModal] = useState<\n    ConfirmModalProps | undefined\n  >(undefined);\n\n  const [tool, setTool] = useState<Tools>(\"paint\");\n  const [background, setBackground] = useState<Backgrounds>({\n    type: \"checkerboard\",\n  });\n  const [brush, setToolAndBrush] = useStickyBrush(\"paint\", setTool);\n  const [control, setControl] = useState<Controls>(\"paint\");\n  const [pickerMode, setPickerMode] = useState<\"history\" | \"pinned\">(\"pinned\");\n  const [isGridShown, setGridShown] = useState(false);\n  const [isPaletteModalShown, setPaletteMenuShown] = useState(false);\n  const [\n    isControlsFeedbackModalShown,\n    setControlsFeedbackModalShown,\n  ] = useState(false);\n  const [palette, setPalette] = useState<AvailablePalettes>(defaultPalette);\n  const [isNewPageModalShown, setCreateMenuShown] = useState(false);\n  const [isSettingsMenuShown, setSettingsMenuShown] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [isFeedbackOn, setFeedbackOn] = useState(true);\n  const [canvas, setCanvas] = useState<undefined | HTMLCanvasElement>();\n  const [pinnedColors, setPinnedColors] = useState<RGBColor[]>([]);\n  const [colorHistory, setColorHistory] = useState<RGBColor[]>([]);\n\n  const paint = useMemo(() => {\n    return new UndoablePaintCanvas(pixelDimensions);\n  }, [pixelDimensions]);\n\n  const onCanvasTouch = (\n    canvas: HTMLCanvasElement,\n    event: React.TouchEvent<HTMLCanvasElement>\n  ): void => {\n    switch (tool) {\n      case \"dropper\": {\n        setTool(brush);\n        const coords = paint.touchToCoords(event);\n        const selectedColor = paint.getColorAt(coords.quantX, coords.quantY);\n        if (selectedColor === RGBColor.NO_COLOR) break;\n        setColor(selectedColor);\n        break;\n      }\n      case \"paint\": {\n        paint.setCanvas(canvas);\n        paint.touchEvent(event, color);\n        paint.drawToCanvas();\n        break;\n      }\n      case \"eraser\": {\n        paint.setCanvas(canvas);\n        paint.touchEvent(event, RGBColor.NO_COLOR);\n        paint.drawToCanvas();\n        break;\n      }\n      case \"fill\": {\n        paint.setCanvas(canvas);\n        const coords = paint.touchToCoords(event);\n        paint.fillWithColor(coords.quantX, coords.quantY, color);\n        paint.drawToCanvas();\n\n        break;\n      }\n    }\n  };\n\n  const onCanvasCreated = (canvas: HTMLCanvasElement): void => {\n    setCanvas(canvas);\n    paint.setCanvas(canvas);\n  };\n\n  const onUndoClick = () => {\n    paint.undo();\n    paint.drawToCanvas();\n  };\n\n  const onRedoClick = () => {\n    paint.redo();\n    paint.drawToCanvas();\n  };\n\n  const onPaletteButtonClick = () => setPaletteMenuShown(!isPaletteModalShown);\n  const onGridButtonClick = () => setGridShown(!isGridShown);\n\n  const onTrashClick = () =>\n    createModal({\n      onAccept: () => {\n        createModal(undefined);\n\n        paint.clear();\n        paint.drawToCanvas();\n      },\n      message: \"Are you sure you want to clear the canvas?\",\n      acceptButtonText: \"Clear\",\n      onCancel: () => {\n        createModal(undefined);\n      },\n      onClose: () => createModal(undefined),\n    });\n  const setColorAndTurnOffPicker = (color: RGBColor): void => {\n    setColor(color);\n    setTool(brush);\n  };\n\n  const isConfirmModalShown = !!confirmModalParameters;\n  /**\n   * TODO: Add darkmode and settings modal\n   */\n  return (\n    <Grommet\n      theme={mergedTheme}\n      style={{ height: \"100%\" }}\n      themeMode={darkMode ? \"dark\" : \"light\"}\n    >\n      <Grid\n        fill\n        areas={[\n          { name: \"header\", start: [0, 0], end: [0, 0] },\n          { name: \"canvas\", start: [0, 1], end: [0, 1] },\n          { name: \"body\", start: [0, 2], end: [0, 2] },\n          { name: \"footer\", start: [0, 3], end: [0, 3] },\n        ]}\n        columns={[\"full\"]}\n        rows={[\"auto\", \"auto\", \"flex\", \"36px\"]}\n      >\n        <Header gridArea=\"header\" justify=\"center\">\n          Pixel Pixy\n        </Header>\n        {isFeedbackOn && isControlsFeedbackModalShown && (\n          <ControlsFeedback\n            onClose={() => setControlsFeedbackModalShown(false)}\n            control={control}\n          />\n        )}\n        <CanvasStack\n          stackProps={{ gridArea: \"canvas\", interactiveChild: \"first\" }}\n          isGridShown={isGridShown}\n          onCanvasCreated={onCanvasCreated}\n          onCanvasTouch={onCanvasTouch}\n          pixelDimensions={pixelDimensions}\n          background={background}\n        />\n\n        <Main gridArea=\"body\" pad=\"small\" elevation=\"xsmall\">\n          <ControlsBanner\n            color={color}\n            tool={tool}\n            isGridShown={isGridShown}\n            onPickerModeClick={setPickerMode}\n            onToolChange={setToolAndBrush}\n            onGridButtonClick={onGridButtonClick}\n            onPaletteButtonClick={onPaletteButtonClick}\n            onRedoClick={onRedoClick}\n            onUndoClick={onUndoClick}\n            onTrashClick={onTrashClick}\n            pickerMode={pickerMode}\n            onControlsClick={(control) => {\n              setControl(control);\n              if (\n                control !== \"palette\" &&\n                control !== \"trash\" &&\n                isFeedbackOn\n              ) {\n                setControlsFeedbackModalShown(true);\n              }\n            }}\n          />\n\n          <BodyColorPicker\n            setColorHistory={setColorHistory}\n            colorHistory={colorHistory}\n            pickerMode={pickerMode}\n            color={color}\n            palette={palette}\n            pinnedColors={pinnedColors}\n            setColorAndTurnOffPicker={setColorAndTurnOffPicker}\n          />\n        </Main>\n        {canvas && (\n          <Footer\n            gridArea=\"footer\"\n            canvas={canvas}\n            onAddButtonClicked={() => setCreateMenuShown(true)}\n            setSettingsMenuShown={setSettingsMenuShown}\n          />\n        )}\n      </Grid>\n\n      {isPaletteModalShown && (\n        <PaletteModal\n          pinnedColors={pinnedColors}\n          setPinnedColors={setPinnedColors}\n          onCancel={() => setPaletteMenuShown(false)}\n          setColor={setColorAndTurnOffPicker}\n          palette={palette}\n          setPalette={setPalette}\n        />\n      )}\n\n      {isConfirmModalShown && (\n        <ConfirmModal\n          onClose={confirmModalParameters!.onClose}\n          onAccept={confirmModalParameters!.onAccept}\n          onCancel={confirmModalParameters!.onCancel}\n          cancelButtonText={confirmModalParameters!.cancelButtonText}\n          acceptButtonText={confirmModalParameters!.acceptButtonText}\n          message={confirmModalParameters!.message}\n        />\n      )}\n\n      {isNewPageModalShown && (\n        <NewPageModal\n          currentDimension={pixelDimensions}\n          onCancel={() => setCreateMenuShown(false)}\n          onCreateNew={(dimension, maybeLoadedImage) => {\n            paint.clear();\n            if (dimension !== pixelDimensions) {\n              setPixelDimensions(dimension);\n            }\n            if (maybeLoadedImage !== undefined) {\n              paint.setPixelsFromImage(maybeLoadedImage);\n            }\n            paint.drawToCanvas();\n            setCreateMenuShown(false);\n          }}\n        />\n      )}\n\n      {isSettingsMenuShown && (\n        <SettingsModal\n          background={background}\n          isDarkMode={darkMode}\n          isFeedbackOn={isFeedbackOn}\n          onCancel={() => setSettingsMenuShown(false)}\n          setDarkMode={setDarkMode}\n          onSave={(settingsData) => {\n            const { backgroundData, isDarkMode, isFeedbackOn } = settingsData;\n            setFeedbackOn(isFeedbackOn);\n            setDarkMode(isDarkMode);\n            setBackground(backgroundData);\n            setSettingsMenuShown(false);\n          }}\n        />\n      )}\n    </Grommet>\n  );\n};\n\nconst useStickyBrush = (\n  defaultBrush: Brushes,\n  setTool: (tool: Tools) => void\n) => {\n  const [brush, setBrush] = useState<Brushes>(defaultBrush);\n\n  const setToolAndBrush = useCallback(\n    (tool: Tools) => {\n      switch (tool) {\n        case \"fill\": {\n          setBrush(\"fill\");\n          break;\n        }\n        case \"paint\": {\n          setBrush(\"paint\");\n          break;\n        }\n      }\n\n      setTool(tool);\n    },\n    [setTool]\n  );\n\n  return [brush, setToolAndBrush] as const;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nwindow.oncontextmenu = function (event: MouseEvent) {\n  event.preventDefault();\n  event.stopPropagation();\n  return false;\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
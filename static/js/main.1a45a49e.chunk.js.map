{"version":3,"sources":["drivers/Color.ts","components/ColorPickerHistory.tsx","components/PinnedColors.tsx","PaletteDictionary.tsx","BodyColorPicker.tsx","components/CanvasContainer.tsx","drivers/getRelativeClickPosition.tsx","components/ColorPickerSwatch.tsx","components/Grid.tsx","ConfirmModal.tsx","drivers/UndoablePaintCanvas.ts","components/SaveButton.tsx","Footer.tsx","components/DimensionPicker.tsx","components/LoadButton.tsx","NewModal.tsx","PaletteColorSwatch.tsx","PalettePicker.tsx","PaletteModal.tsx","components/DropperIcon.tsx","components/PaletteIcon.tsx","HighlightableButton.tsx","ToolsBanner.tsx","App.tsx","index.tsx"],"names":["HSLColor","hue","saturation","lightness","hsl","this","hslString","sep","indexOf","substr","split","hString","s","parseFloat","length","l","h","Math","round","PI","r","g","b","cMin","min","cMax","max","delta","abs","RGBColor","fromHSL","red","green","blue","rgb","RangeError","c","x","m","hex","Number","isInteger","TypeError","hexString","toString","fromHexString","rgbString","rgbChunks","rgbValues","R","parseInt","rString","gString","bString","fromRGB","a","r1","g1","b1","r2","g2","b2","NO_COLOR","ColorPickerHistory","colorSelected","onColorPicked","useState","colorHistory","setColorHistory","useEffect","filter","color","Equals","newColorHistory","unshift","slice","Box","className","direction","justify","wrap","gap","map","index","height","width","pad","bottom","Button","fill","size","onClick","style","backgroundColor","toHex","border","PinnedColors","pinnedColors","paletteColorDictionary","c64","cga","teletext","paletteNameDictionary","BodyColorPicker","setColorAndTurnOffPicker","palette","pickerMode","colorString","CanvasContainer","onCanvasCreated","onTouchEvent","pixelDimensions","canvasRef","useRef","canvas","current","onInnerTouchEvent","event","backgroundSize","ref","onTouchEnd","onTouchMove","getRelativeClickPosition","screenX","changedTouches","clientX","screenY","clientY","rect","target","getBoundingClientRect","clip","value","clippedX","left","clippedY","top","relativeX","relativeY","ColorPickerSwatch","selectedColor","toHSL","currentHSL","setCurrentHSL","areas","name","start","end","columns","rows","Stack","gridArea","interactiveChild","scaledX","scaledY","clone","toRGB","Grid","rootCanvas","context","getContext","clearRect","strokeStyle","lineWidth","xIncrement","xIndex","moveTo","lineTo","stroke","yIncrement","yIndex","clientWidth","clientHeight","ConfirmModal","onAccept","onCancel","message","cancelButtonText","acceptButtonText","Layer","modal","position","responsive","full","onClickOutside","Text","alignSelf","label","primary","Symbol","iterator","toStringTag","KeyPairMap","keyPairMap","Map","keyA","keyB","set","clear","get","delete","callbackfn","thisArg","toRefMap","forEach","tempMap","innerMap","outerMap","keys","has","entries","values","lines","key","push","join","UndoablePaintCanvas","dimension","undoBuffer","UndoRedoBuffer","getPixelMap","addCurrent","y","undo","setPixelMap","redo","redoOne","undefined","pixelMap","Error","PaintCanvas","DrawToCanvas","AreDimensionsCompatible","image","document","createElement","naturalWidth","naturalHeight","drawImage","setPixelsFromCanvas","xIntervals","yIntervals","mutableMap","data","getImageData","maybeColor","result","paintCanvas","fillStyle","fillRect","sqrt","touchToCoords","quantX","quantY","currentColor","getColorAt","setColorAt","floor","redoBuffer","Array","maybeTop","getBufferLength","redid","pop","base","maxSize","buffer","maybeReverseState","SaveButton","anchorRef","icon","Share","fullScaleCanvas","window","innerWidth","imageSmoothingEnabled","toDataURL","href","click","display","download","Footer","setCreateMenuShown","right","count","align","Actions","console","log","Add","labelToValue","valueToLabel","1","8","10","12","14","16","18","20","22","24","options","DimensionPicker","onDimensionChange","Select","placeholder","onChange","option","LoadButton","setLoadedImage","input","imagePromise","Promise","resolve","reject","files","imageUrl","URL","createObjectURL","Image","src","onload","type","accept","NewModal","createNew","PaletteColourSwatch","selectedPalette","Object","borderRadius","Teletext","PalettePicker","onPaletteChange","possiblePalettes","PaletteModal","setColor","setPalette","DropperIcon","props","StyledIcon","viewBox","a11yTitle","stroke-width","d","PaletteIcon","xmlns","fill-opacity","cx","cy","HighlightableButton","isHighlighted","boxShadow","ToolsBanner","onPickerModeClick","onUndoClick","onRedoClick","onPaletteButtonClick","onGridButtonClick","onEraserButtonClick","onPaintButtonClick","onDropperButtonClick","onTrashClick","isDropper","isGridShown","isErasing","Brush","Erase","Pin","History","Undo","Redo","Trash","App","setPixelDimensions","setColorMode","setIsErasing","confirmModalParameters","setConfirmModalParameters","setPickerMode","setIsDropper","setGridShown","isPaletteMenuShown","setPaletteMenuShown","isCreateMenuShown","setCanvas","paint","useMemo","Grommet","theme","grommet","themeMode","coords","touchEvent","drawToCanvas","hasCanvas","warn","setPixelsFromImage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1a45a49e.chunk.js","sourcesContent":["export class HSLColor {\n  /**\n   * @param hslString A string following the possible forms\n   * hsl(180 100% 50%)\n   * hsl(180deg,100%,50%)\n   * hsl(180deg 100% 50%)\n   * hsl(3.14rad,100%,50%)\n   * hsl(3.14rad 100% 50%)\n   * hsl(0.5turn,100%,50%)\n   * hsl(0.5turn 100% 50%)\n   */\n  static fromHSLString(hslString: string) {\n    let sep = hslString.indexOf(\",\") > -1 ? \",\" : \" \";\n    const hsl = hslString.substr(4).split(\")\")[0].split(sep);\n\n    let hString = hsl[0];\n    let s = parseFloat(hsl[1].substr(0, hsl[1].length - 1)) / 100;\n    let l = parseFloat(hsl[2].substr(0, hsl[2].length - 1)) / 100;\n\n    let h = 0;\n\n    if (hString.indexOf(\"deg\") > -1)\n      hString = hString.substr(0, hString.length - 3);\n    else if (hString.indexOf(\"rad\") > -1)\n      h = Math.round(\n        parseFloat(hString.substr(0, hString.length - 3)) * (180 / Math.PI)\n      );\n    else if (hString.indexOf(\"turn\") > -1)\n      h = Math.round(parseFloat(hString.substr(0, hString.length - 4)) * 360);\n    // Keep hue fraction of 360 if ending up over\n    if (h >= 360) h %= 360;\n\n    return new HSLColor(h, s, l);\n  }\n\n  static fromRGB(r: number, g: number, b: number) {\n    // Make r, g, and b fractions of 1\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    // Find greatest and smallest channel values\n    let cMin = Math.min(r, g, b);\n    let cMax = Math.max(r, g, b);\n    let delta = cMax - cMin;\n    let h = 0;\n    let s = 0;\n    let l = 0;\n\n    // Calculate hue\n    // No difference\n    if (delta === 0) h = 0;\n    // Red is max\n    else if (cMax === r) h = ((g - b) / delta) % 6;\n    // Green is max\n    else if (cMax === g) h = (b - r) / delta + 2;\n    // Blue is max\n    else h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    // Make negative hues positive behind 360°\n    if (h < 0) h += 360;\n\n    // Calculate lightness\n    l = (cMax + cMin) / 2;\n\n    // Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n    return new HSLColor(h, s, l);\n  }\n\n  constructor(hue: number, saturation: number, lightness: number) {\n    this.hsl = [hue, saturation, lightness];\n  }\n\n  hsl: [number, number, number];\n\n  get h() {\n    return this.hsl[0];\n  }\n  get s() {\n    return this.hsl[1];\n  }\n  get l() {\n    return this.hsl[2];\n  }\n\n  set h(h: number) {\n    this.hsl[0] = h;\n  }\n  set s(s: number) {\n    this.hsl[1] = s;\n  }\n  set l(l: number) {\n    this.hsl[2] = l;\n  }\n\n  toHSLString() {\n    const [h, s, l] = this.hsl;\n    return \"hsl(\" + h + \",\" + s * 100 + \"%,\" + l * 100 + \"%)\";\n  }\n\n  toRGB(): RGBColor {\n    return RGBColor.fromHSL(...this.hsl);\n  }\n\n  clone(): HSLColor {\n    return new HSLColor(...this.hsl);\n  }\n}\n\nexport type NoColor = \"NO_COLOR\";\nexport class RGBColor {\n  static readonly NO_COLOR: NoColor = \"NO_COLOR\";\n  /**\n   * @param h Degrees\n   * @param s Percent\n   * @param l Percent\n   */\n\n  static fromHSL(h: number, s: number, l: number) {\n    if (h < 0 || h > 359) {\n      throw new RangeError(\"Hue should be between 0 and 359 inclusive\");\n    }\n    if (s < 0 || s > 1) {\n      throw new RangeError(\n        \"Saturation is a percentage and should be between 0 and 1 inclusive\"\n      );\n    }\n    if (l < 0 || l > 1) {\n      throw new RangeError(\n        \"Lightness is a percentage and should be between 0 and 1 inclusive\"\n      );\n    }\n\n    let c = (1 - Math.abs(2 * l - 1)) * s;\n    let x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n    let m = l - c / 2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (0 <= h && h < 60) {\n      r = c;\n      g = x;\n      b = 0;\n    } else if (60 <= h && h < 120) {\n      r = x;\n      g = c;\n      b = 0;\n    } else if (120 <= h && h < 180) {\n      r = 0;\n      g = c;\n      b = x;\n    } else if (180 <= h && h < 240) {\n      r = 0;\n      g = x;\n      b = c;\n    } else if (240 <= h && h < 300) {\n      r = x;\n      g = 0;\n      b = c;\n    } else if (300 <= h && h < 360) {\n      r = c;\n      g = 0;\n      b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return new RGBColor(r, g, b);\n  }\n\n  /**\n   * @param hex A number between 0-16777215\n   */\n  static fromHex(hex: number) {\n    if (!Number.isInteger(hex))\n      throw new TypeError(`Number should be an integer, got: ${hex}`);\n    if (hex < 0 || hex > (2 ^ 24)) {\n      throw new RangeError(\"Number should be between 0-16777215 inclusive\");\n    }\n\n    const hexString = hex.toString(16);\n\n    return RGBColor.fromHexString(\"#\" + hexString);\n  }\n\n  static fromRGBString(rgbString: string) {\n    let sep = rgbString.indexOf(\",\") > -1 ? \",\" : \" \";\n    const rgbChunks = rgbString.substr(4).split(\")\")[0].split(sep);\n    const rgbValues: number[] = [];\n\n    for (let R in rgbChunks) {\n      let r = rgbChunks[R];\n      if (r.indexOf(\"%\") > -1)\n        rgbValues[R] =\n          Math.round(parseFloat(r.substr(0, r.length - 1)) / 100) * 255;\n    }\n\n    const r = rgbValues[0];\n    const g = rgbValues[1];\n    const b = rgbValues[2];\n\n    return new RGBColor(r, g, b);\n  }\n\n  static fromHexString(hexString: string) {\n    if (hexString.length !== 7) {\n      throw new TypeError(\n        \"Hex string is not 7 characters long. Got: \" + hexString\n      );\n    }\n\n    if (hexString[0] !== \"#\") {\n      throw new TypeError(\n        \"Hex color string should start with #. Got: \" + hexString[0]\n      );\n    }\n\n    const r = parseInt(\"0x\" + hexString[1] + hexString[2], 16);\n    const g = parseInt(\"0x\" + hexString[3] + hexString[4], 16);\n    const b = parseInt(\"0x\" + hexString[5] + hexString[6], 16);\n\n    return new RGBColor(r, g, b);\n  }\n\n  constructor(red: number, green: number, blue: number) {\n    this.rgb = [red, green, blue];\n  }\n\n  rgb: [number, number, number];\n\n  get r() {\n    return this.rgb[0];\n  }\n  get g() {\n    return this.rgb[1];\n  }\n  get b() {\n    return this.rgb[2];\n  }\n\n  set r(r: number) {\n    this.rgb[0] = r;\n  }\n  set g(g: number) {\n    this.rgb[1] = g;\n  }\n  set b(b: number) {\n    this.rgb[2] = b;\n  }\n\n  static Equals(a: RGBColor, b: RGBColor) {\n    const [r1, g1, b1] = a.rgb;\n    const [r2, g2, b2] = b.rgb;\n\n    return r1 === r2 && g1 === g2 && b1 === b2;\n  }\n\n  toHex() {\n    const [r, g, b] = this.rgb;\n    let rString = r.toString(16);\n    let gString = g.toString(16);\n    let bString = b.toString(16);\n\n    if (rString.length === 1) rString = \"0\" + rString;\n    if (gString.length === 1) gString = \"0\" + gString;\n    if (bString.length === 1) bString = \"0\" + bString;\n\n    return \"#\" + rString + gString + bString;\n  }\n\n  toHSL(): HSLColor {\n    return HSLColor.fromRGB(...this.rgb);\n  }\n}\n","import { Box, Button } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { RGBColor } from \"../drivers/Color\";\n\nexport const ColorPickerHistory = ({\n  colorSelected,\n  onColorPicked,\n}: {\n  colorSelected: RGBColor;\n  onColorPicked: (color: RGBColor) => void;\n}) => {\n  const [colorHistory, setColorHistory] = useState<RGBColor[]>([]);\n\n  useEffect(() => {\n    if (\n      colorHistory.filter((color) => {\n        return RGBColor.Equals(color, colorSelected);\n      }).length !== 0\n    ) {\n      return;\n    }\n\n    let newColorHistory = [...colorHistory];\n    newColorHistory.unshift(colorSelected);\n    if (newColorHistory.length > 8) {\n      newColorHistory = newColorHistory.slice(0, 8);\n    }\n\n    setColorHistory(newColorHistory);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [colorSelected]);\n\n  return (\n    <Box\n      className=\"ColorPickerHistory\"\n      direction=\"row\"\n      justify=\"start\"\n      wrap\n      gap=\"xxsmall\"\n    >\n      {colorHistory.map((color, index) => (\n        <Box height=\"xxsmall\" width=\"xxsmall\" pad={{ bottom: \"xsmall\" }}>\n          <Button\n            fill=\"vertical\"\n            size=\"small\"\n            onClick={() => onColorPicked(color)}\n            key={index}\n            style={{\n              backgroundColor: color.toHex(),\n              border: \"none\",\n            }}\n          ></Button>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","import { Box, Button } from \"grommet\";\nimport { RGBColor } from \"../drivers/Color\";\n\nexport const PinnedColors = ({\n  pinnedColors = [],\n  onColorPicked,\n}: {\n  pinnedColors: RGBColor[];\n  onColorPicked: (color: RGBColor) => void;\n}) => {\n  return (\n    <Box\n      className=\"ColorPickerHistory\"\n      direction=\"row\"\n      justify=\"start\"\n      wrap\n      gap=\"xxsmall\"\n    >\n      {pinnedColors.slice(0, 8).map((color, index) => (\n        <Box height=\"xxsmall\" width=\"xxsmall\" pad={{ bottom: \"xsmall\" }}>\n          <Button\n            fill=\"vertical\"\n            size=\"small\"\n            onClick={() => onColorPicked(color)}\n            key={index}\n            style={{\n              backgroundColor: color.toHex(),\n              border: \"none\",\n            }}\n          ></Button>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","export const paletteColorDictionary: {\n  [key: string]: string[];\n} = {\n  c64: [\n    \"#000000\",\n    \"#FFFFFF\",\n    \"#880000\",\n    \"#AAFFEE\",\n    \"#DD8855\",\n    \"#664400\",\n    \"#FF7777\",\n    \"#333333\",\n    \"#CC44CC\",\n    \"#00CC55\",\n    \"#0000AA\",\n    \"#EEEE77\",\n    \"#777777\",\n    \"#AAFF66\",\n    \"#0088FF\",\n    \"#BBBBBB\",\n  ],\n  cga: [\n    \"#000000\",\n    \"#0000AA\",\n    \"#00AA00\",\n    \"#00AAAA\",\n    \"#555555\",\n    \"#5555FF\",\n    \"#55FF55\",\n    \"#55FFFF\",\n    \"#AA0000\",\n    \"#AA00AA\",\n    \"#AA5500\",\n    \"#AAAAAA\",\n    \"#FF5555\",\n    \"#FF55FF\",\n    \"#FFFF55\",\n    \"#FFFFFF\",\n  ],\n  teletext: [\n    \"#000000\",\n    \"#ff0000\",\n    \"#ffff00\",\n    \"#00ff00\",\n    \"#00ffff\",\n    \"#0000ff\",\n    \"#ff00ff\",\n    \"#ffffff\",\n  ],\n};\n\nexport const paletteNameDictionary = {\n  c64: \"Commodore 64\",\n  cga: \"DOS CGA/ EGA\",\n  teletext: \"Teletext\",\n} as const;\n\nexport type AvailablePalettes = keyof typeof paletteNameDictionary;\n","import { ColorPickerHistory } from \"./components/ColorPickerHistory\";\nimport { PinnedColors } from \"./components/PinnedColors\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { AvailablePalettes, paletteColorDictionary } from \"./PaletteDictionary\";\n\n/** TODO: Make a component that displays a list of colors.\n * Use logic here to decide which colors to show.\n * Probably remove ColorPickerHistory and PinnedColors and combine into here */\nexport const BodyColorPicker = ({\n  setColorAndTurnOffPicker,\n  color,\n  palette,\n  pickerMode,\n}: {\n  pickerMode: \"history\" | \"pinned\";\n  setColorAndTurnOffPicker: (color: RGBColor) => void;\n  color: RGBColor;\n  palette: AvailablePalettes;\n}) => {\n  if (pickerMode === \"history\") {\n    return (\n      <ColorPickerHistory\n        onColorPicked={setColorAndTurnOffPicker}\n        colorSelected={color}\n      />\n    );\n  } else {\n    return (\n      <PinnedColors\n        onColorPicked={setColorAndTurnOffPicker}\n        pinnedColors={paletteColorDictionary[palette].map((colorString) =>\n          RGBColor.fromHexString(colorString)\n        )}\n      />\n    );\n  }\n};\n","import { TouchEvent, useEffect, useRef } from \"react\";\nimport \"../styles/CanvasContainer.css\";\n\nexport const CanvasContainer = ({\n  onCanvasCreated,\n  onTouchEvent,\n  pixelDimensions,\n}: {\n  pixelDimensions: number;\n  onCanvasCreated: (canvas: HTMLCanvasElement) => void;\n  onTouchEvent: (\n    canvas: HTMLCanvasElement,\n    touchEvent: TouchEvent<HTMLCanvasElement>\n  ) => void;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      onCanvasCreated(canvas);\n    }\n  }, [onCanvasCreated]);\n\n  const onInnerTouchEvent = (event: TouchEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    onTouchEvent(canvas, event);\n  };\n\n  return (\n    <canvas\n      className=\"CanvasContainer\"\n      style={{\n        backgroundSize: `${100 / pixelDimensions / 2}%`,\n      }}\n      ref={canvasRef}\n      width={pixelDimensions}\n      height={pixelDimensions}\n      onTouchEnd={onInnerTouchEvent}\n      onTouchMove={onInnerTouchEvent}\n    ></canvas>\n  );\n};\n","import { TouchEvent } from \"react\";\n\nexport function getRelativeClickPosition(\n  event: TouchEvent<HTMLElement>\n): { relativeX: number; relativeY: number } {\n  const screenX = event.changedTouches[0].clientX;\n  const screenY = event.changedTouches[0].clientY;\n  const rect = (event.target as HTMLElement).getBoundingClientRect();\n\n  const clip = (value: number, min: number, max: number) =>\n    Math.min(max, Math.max(value, min));\n\n  const clippedX = clip(screenX - rect.left, 0, rect.width - 1);\n  const clippedY = clip(screenY - rect.top, 0, rect.height - 1);\n\n  const relativeX = clippedX / rect.width;\n  const relativeY = clippedY / rect.height;\n  return { relativeX: relativeX, relativeY: relativeY };\n}\n","import { Box, Grid, Stack } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { RGBColor } from \"../drivers/Color\";\nimport { getRelativeClickPosition } from \"../drivers/getRelativeClickPosition\";\nimport \"../styles/ColorPickerSwatch.css\";\nexport const ColorPickerSwatch = ({\n  selectedColor,\n  onColorPicked,\n}: {\n  selectedColor: RGBColor;\n  onColorPicked: (color: RGBColor) => void;\n}) => {\n  const [currentHSL, setCurrentHSL] = useState(() => {\n    const hsl = selectedColor.toHSL();\n\n    return hsl;\n  });\n\n  useEffect(() => {\n    const hsl = selectedColor.toHSL();\n    if (hsl) {\n      setCurrentHSL(hsl);\n    }\n  }, [selectedColor]);\n\n  return (\n    <Grid\n      fill\n      areas={[\n        { name: \"saturation-lightness\", start: [0, 0], end: [0, 0] },\n        {\n          name: \"hue\",\n          start: [0, 1],\n          end: [0, 1],\n        },\n      ]}\n      columns={[\"full\"]}\n      rows={[\"auto\", \"xxsmall\"]}\n    >\n      <Stack fill gridArea=\"saturation-lightness\" interactiveChild={1}>\n        <Box\n          className=\"SelectedColor\"\n          style={{ backgroundColor: `hsl(${currentHSL.h}, 100%, 50%)` }}\n        />\n        <Box\n          fill\n          className=\"Saturation\"\n          onTouchEnd={(event) => {\n            const {\n              relativeX: scaledX,\n              relativeY: scaledY,\n            } = getRelativeClickPosition(event);\n            currentHSL.s = scaledX;\n            currentHSL.l = (1 - scaledY) * (1 - currentHSL.s / 2);\n            setCurrentHSL(currentHSL.clone());\n            onColorPicked(currentHSL.toRGB());\n          }}\n          onTouchMove={(event) => {\n            const {\n              relativeX: scaledX,\n              relativeY: scaledY,\n            } = getRelativeClickPosition(event);\n            currentHSL.s = scaledX;\n            currentHSL.l = (1 - scaledY) * (1 - currentHSL.s / 2);\n            setCurrentHSL(currentHSL.clone());\n          }}\n        />\n        <Box fill className=\"Lightness\" />\n      </Stack>\n      <Box\n        fill\n        gridArea=\"hue\"\n        className=\"Hue\"\n        onTouchEnd={(event) => {\n          const { relativeX: scaledX } = getRelativeClickPosition(event);\n          currentHSL.h = scaledX * 360;\n          setCurrentHSL(currentHSL.clone());\n        }}\n        onTouchMove={(event) => {\n          const { relativeX: scaledX } = getRelativeClickPosition(event);\n          currentHSL.h = scaledX * 360;\n          setCurrentHSL(currentHSL.clone());\n        }}\n      ></Box>\n    </Grid>\n  );\n};\n","import { useEffect, useRef } from \"react\";\nimport \"../styles/Grid.css\";\n\nexport const Grid = ({\n  pixelDimensions,\n  rootCanvas,\n}: {\n  pixelDimensions: number;\n  rootCanvas: HTMLCanvasElement;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n\n    if (!context || !canvas) return;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.strokeStyle = \"lightgrey\";\n    context.lineWidth = 1;\n    const xIncrement = canvas.width / pixelDimensions;\n    for (let xIndex = 0; xIndex < pixelDimensions; xIndex++) {\n      context.moveTo(Math.round(xIndex * xIncrement), 0);\n      context.lineTo(Math.round(xIndex * xIncrement), canvas.height);\n      context.stroke();\n    }\n\n    // Horizontal lines\n    const yIncrement = canvas.height / pixelDimensions;\n    for (let yIndex = 0; yIndex < pixelDimensions; yIndex++) {\n      context.moveTo(0, Math.round(yIndex * yIncrement));\n      context.lineTo(canvas.width, Math.round(yIndex * yIncrement));\n      context.stroke();\n    }\n\n    return () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n  });\n  return (\n    <canvas\n      ref={canvasRef}\n      key={pixelDimensions}\n      className=\"Grid\"\n      width={rootCanvas.clientWidth}\n      height={rootCanvas.clientHeight}\n    />\n  );\n};\n","import { Box, Button, Layer, Text } from \"grommet\";\nimport React from \"react\";\n\nexport type ConfirmModalProps = {\n  onAccept: () => void;\n  onCancel?: () => void;\n  message?: string;\n  acceptButtonText?: string;\n  cancelButtonText?: string;\n};\n\nexport const ConfirmModal = ({\n  onAccept,\n  onCancel,\n  message = \"Are you sure?\",\n  cancelButtonText = \"Cancel\",\n  acceptButtonText = \"Accept\",\n}: ConfirmModalProps) => {\n  return (\n    <Layer\n      modal\n      position=\"center\"\n      responsive={false}\n      full=\"horizontal\"\n      onClickOutside={onCancel}\n    >\n      <Box gap=\"small\" pad=\"small\">\n        <Text alignSelf=\"center\">{message}</Text>\n        <Box direction=\"row\" justify=\"between\" gap=\"small\">\n          <Button\n            label={cancelButtonText}\n            onClick={onCancel}\n            alignSelf=\"start\"\n          />\n          <Button\n            primary\n            label={acceptButtonText}\n            onClick={onAccept}\n            alignSelf=\"end\"\n          />\n        </Box>\n      </Box>\n    </Layer>\n  );\n};\n","import { NoColor, RGBColor } from \"./Color\";\nimport { getRelativeClickPosition } from \"./getRelativeClickPosition\";\n\nexport class KeyPairMap<KeyA, KeyB, Value> implements Map<[KeyA, KeyB], Value> {\n  constructor(keyPairMap?: KeyPairMap<KeyA, KeyB, Value>) {\n    if (!keyPairMap) return;\n\n    for (let [[keyA, keyB], value] of keyPairMap) {\n      this.set([keyA, keyB], value);\n    }\n  }\n\n  private map = new Map<KeyA, Map<KeyB, Value>>();\n\n  clear(): void {\n    this.map.clear();\n  }\n\n  delete([keyA, keyB]: [KeyA, KeyB]): boolean {\n    return this.map.get(keyA)?.delete(keyB) || false;\n  }\n\n  clone(): KeyPairMap<KeyA, KeyB, Value> {\n    return new KeyPairMap(this);\n  }\n\n  forEach(\n    callbackfn: (\n      value: Value,\n      key: [KeyA, KeyB],\n      map: Map<[KeyA, KeyB], Value>\n    ) => void,\n    thisArg?: any\n  ): void {\n    const refMap = this.toRefMap();\n\n    refMap.forEach(callbackfn, thisArg);\n  }\n\n  private toRefMap() {\n    const tempMap = new Map<[KeyA, KeyB], Value>();\n    this.map.forEach((innerMap, keyA, outerMap) => {\n      innerMap.forEach((value, keyB, innerMap) => {\n        const keys = [keyA, keyB] as [KeyA, KeyB];\n        tempMap.set(keys, value);\n      });\n    });\n    return tempMap;\n  }\n\n  get([keyA, keyB]: [KeyA, KeyB]): Value | undefined {\n    return this.map.get(keyA)?.get(keyB);\n  }\n\n  has([keyA, keyB]: [KeyA, KeyB]): boolean {\n    return this.map.get(keyA)?.has(keyB) || false;\n  }\n\n  set([keyA, keyB]: [KeyA, KeyB], value: Value): this {\n    const hasKeyA = this.map.has(keyA);\n\n    if (!hasKeyA) {\n      this.map.set(keyA, new Map());\n    }\n    this.map.get(keyA)!.set(keyB, value);\n\n    return this;\n  }\n\n  get size() {\n    return this.toRefMap().size;\n  }\n\n  [Symbol.iterator](): IterableIterator<[[KeyA, KeyB], Value]> {\n    return this.toRefMap()[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[[KeyA, KeyB], Value]> {\n    return this.toRefMap().entries();\n  }\n\n  keys(): IterableIterator<[KeyA, KeyB]> {\n    return this.toRefMap().keys();\n  }\n\n  values(): IterableIterator<Value> {\n    return this.toRefMap().values();\n  }\n\n  toString(): string {\n    let lines = [];\n\n    for (let [key, value] of this) {\n      lines.push(`${key[0]}, ${key[1]}, ${value}`);\n    }\n\n    return lines.join(\"\\n\");\n  }\n  [Symbol.toStringTag]: string;\n}\n\nexport class PaintCanvas {\n  static DrawToCanvas(paintCanvas: PaintCanvas, canvas: HTMLCanvasElement) {\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n    paintCanvas.forEach(([x, y], color) => {\n      if (color === RGBColor.NO_COLOR) {\n        context.clearRect(x, y, 1, 1);\n        return;\n      }\n\n      context.fillStyle = color.toHex();\n      context.fillRect(x, y, 1, 1);\n    });\n  }\n\n  static AreDimensionsCompatible(\n    paintCanvas: PaintCanvas,\n    canvas: HTMLCanvasElement\n  ) {\n    const { width, height } = canvas;\n    const dimension = paintCanvas.dimension();\n\n    if (width !== height) {\n      return false;\n    }\n\n    if (dimension !== width) {\n      return false;\n    }\n\n    return true;\n  }\n\n  drawToCanvas() {\n    if (this.canvas === undefined) {\n      throw new Error(\"Cannot draw to canvas, no canvas set\");\n    }\n\n    PaintCanvas.DrawToCanvas(this, this.canvas);\n  }\n\n  setCanvas(canvas: HTMLCanvasElement) {\n    if (!PaintCanvas.AreDimensionsCompatible(this, canvas)) {\n      throw new RangeError(\n        `PaintCanvas and HTMLCanvas should be square and the same dimensions. Got PaintCanvas: ${this.dimension()} canvas: ${\n          canvas.width\n        }x${canvas.height}`\n      );\n    }\n\n    this.canvas = canvas;\n  }\n\n  hasCanvas(): boolean {\n    return this.canvas !== undefined;\n  }\n\n  getCanvas(): HTMLCanvasElement | undefined {\n    return this.canvas;\n  }\n\n  private pixelMap = new KeyPairMap<number, number, RGBColor | NoColor>();\n\n  getPixelMap() {\n    return this.pixelMap;\n  }\n\n  setPixelMap(map: KeyPairMap<number, number, RGBColor | \"NO_COLOR\">) {\n    if (map.size !== this.pixelMap.size) {\n      throw new RangeError(\n        \"Cannot set pixel map. Pixel maps are not the same dimensions\"\n      );\n    }\n    this.pixelMap = map.clone();\n  }\n\n  setPixelsFromImage(image: HTMLImageElement) {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n\n    canvas.width = image.naturalWidth;\n    canvas.height = image.naturalHeight;\n    context.drawImage(image, 0, 0);\n\n    this.setPixelsFromCanvas(canvas);\n  }\n\n  setPixelsFromCanvas(canvas: HTMLCanvasElement) {\n    const context = canvas.getContext(\"2d\");\n    if (!context) throw new Error(\"Could not get context for canvas\");\n\n    const xIntervals = canvas.width / this.dimension();\n    const yIntervals = canvas.height / this.dimension();\n    this.mutableMap(([x, y]) => {\n      const { data } = context.getImageData(\n        x * xIntervals,\n        y * yIntervals,\n        1,\n        1\n      );\n\n      const [r, g, b, a] = data;\n      const color = a === 0 ? RGBColor.NO_COLOR : new RGBColor(r, g, b);\n      return color;\n    });\n  }\n\n  clear() {\n    this.mutableMap(() => RGBColor.NO_COLOR);\n  }\n\n  setColorAt(x: number, y: number, color: RGBColor | NoColor) {\n    const isPixelInRange = this.pixelMap.has([x, y]);\n\n    if (!isPixelInRange) {\n      throw RangeError(`Pixel at ${x},${y} does not exist`);\n    }\n\n    this.pixelMap.set([x, y], color);\n  }\n\n  getColorAt(x: number, y: number): RGBColor | NoColor {\n    const maybeColor = this.pixelMap.get([x, y]);\n\n    if (maybeColor === undefined)\n      throw RangeError(`Pixel at ${x},${y} does not exist`);\n\n    return maybeColor;\n  }\n\n  mutableMap(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => RGBColor | NoColor\n  ) {\n    for (let [key, value] of this.pixelMap.entries()) {\n      const result = callbackfn(key, value);\n      this.pixelMap.set(key, result);\n    }\n  }\n\n  forEach(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => void\n  ) {\n    for (let [key, value] of this.pixelMap.entries()) {\n      callbackfn(key, value);\n    }\n  }\n  private canvas?: HTMLCanvasElement;\n\n  constructor(dimension: number) {\n    for (let x = 0; x < dimension; x++) {\n      for (let y = 0; y < dimension; y++) {\n        const keys = [x, y] as [number, number];\n        const color = RGBColor.NO_COLOR;\n        this.pixelMap.set(keys, color);\n      }\n    }\n  }\n\n  dimension(): number {\n    return Math.sqrt(this.pixelMap.size);\n  }\n\n  touchEvent(event: React.TouchEvent<HTMLElement>, color: RGBColor | NoColor) {\n    const { quantX, quantY } = this.touchToCoords(event);\n\n    const currentColor = this.getColorAt(quantX, quantY);\n\n    if (color === \"NO_COLOR\" && currentColor === \"NO_COLOR\") {\n      return;\n    }\n\n    if (color === \"NO_COLOR\" && currentColor !== \"NO_COLOR\") {\n      this.setColorAt(quantX, quantY, color);\n      return;\n    }\n\n    if (color !== \"NO_COLOR\" && currentColor === \"NO_COLOR\") {\n      this.setColorAt(quantX, quantY, color);\n      return;\n    }\n\n    if (color !== \"NO_COLOR\" && currentColor !== \"NO_COLOR\") {\n      if (!RGBColor.Equals(color, currentColor)) {\n        this.setColorAt(quantX, quantY, color);\n      }\n    }\n  }\n\n  touchToCoords(event: React.TouchEvent<HTMLElement>) {\n    const { relativeX, relativeY } = getRelativeClickPosition(event);\n    const scaledX = relativeX * this.dimension();\n    const scaledY = relativeY * this.dimension();\n    const quantX = Math.floor(scaledX);\n    const quantY = Math.floor(scaledY);\n    return { quantX, quantY };\n  }\n}\n\nexport class UndoablePaintCanvas extends PaintCanvas {\n  undoBuffer: UndoRedoBuffer<KeyPairMap<number, number, RGBColor | \"NO_COLOR\">>;\n  constructor(dimension: number) {\n    super(dimension);\n\n    this.undoBuffer = new UndoRedoBuffer<\n      KeyPairMap<number, number, RGBColor | NoColor>\n    >(this.getPixelMap().clone());\n  }\n\n  mutableMap(\n    callbackfn: (\n      coord: [x: number, y: number],\n      color: RGBColor | NoColor\n    ) => RGBColor | NoColor\n  ) {\n    super.mutableMap(callbackfn);\n    this.undoBuffer.addCurrent(this.getPixelMap().clone());\n  }\n\n  setColorAt(x: number, y: number, color: RGBColor | NoColor) {\n    super.setColorAt(x, y, color);\n    this.undoBuffer.addCurrent(this.getPixelMap().clone());\n  }\n\n  undo() {\n    const undo = this.undoBuffer.undo();\n    this.setPixelMap(undo);\n  }\n\n  redo() {\n    const redo = this.undoBuffer.redoOne();\n    if (redo !== undefined) {\n      this.setPixelMap(redo);\n    }\n  }\n}\n\nexport class UndoBuffer<T> {\n  buffer: T[];\n\n  constructor(private base: T, private maxSize?: number) {\n    this.buffer = [base];\n  }\n\n  top() {\n    return this.buffer[this.buffer.length - 1] as T | undefined;\n  }\n\n  undo() {\n    this.buffer.pop();\n    const maybeReverseState = this.buffer[this.buffer.length - 1] as\n      | T\n      | undefined;\n    if (maybeReverseState) {\n      return maybeReverseState;\n    } else {\n      this.buffer = [this.base];\n      return this.base;\n    }\n  }\n\n  addCurrent(value: T) {\n    this.buffer.push(value);\n\n    if (this.maxSize && this.maxSize < this.buffer.length) {\n      this.buffer = this.buffer.slice(-this.maxSize - 2);\n    }\n  }\n\n  getUndoSize() {\n    return Math.max(this.buffer.length - 2, 0);\n  }\n\n  getBufferLength() {\n    return this.buffer.length;\n  }\n\n  clear() {\n    this.buffer = [];\n  }\n}\n\nexport class UndoRedoBuffer<T> extends UndoBuffer<T> {\n  private redoBuffer = new Array<T>();\n\n  undo(): T {\n    const maybeTop = this.top();\n    if (maybeTop !== undefined && this.getBufferLength() > 1) {\n      this.redoBuffer.push(maybeTop);\n    }\n\n    const previousPoint = super.undo();\n    return previousPoint;\n  }\n\n  addCurrent(value: T) {\n    this.redoBuffer = [];\n    super.addCurrent(value);\n  }\n\n  getUndoSize() {\n    return super.getUndoSize();\n  }\n\n  getRedoSize() {\n    return this.redoBuffer.length;\n  }\n\n  redoOne(): T | undefined {\n    const redid = this.redoBuffer.pop();\n    if (redid !== undefined) {\n      super.addCurrent(redid);\n    }\n\n    return redid;\n  }\n\n  clear() {\n    this.redoBuffer = [];\n    super.clear();\n  }\n}\n","/* eslint-disable jsx-a11y/anchor-has-content */\nimport { Button } from \"grommet\";\nimport { Share } from \"grommet-icons\";\nimport { useRef } from \"react\";\n\nexport const SaveButton = ({ canvas }: { canvas: HTMLCanvasElement }) => {\n  const anchorRef = useRef<HTMLAnchorElement>(null);\n  return (\n    <>\n      <Button\n        icon={<Share />}\n        onClick={(event) => {\n          const fullScaleCanvas = document.createElement(\"canvas\");\n          fullScaleCanvas.width = window.innerWidth;\n          fullScaleCanvas.height = window.innerWidth;\n          const context = fullScaleCanvas.getContext(\"2d\")!;\n          context.imageSmoothingEnabled = false;\n          context.drawImage(\n            canvas,\n            0,\n            0,\n            fullScaleCanvas.width,\n            fullScaleCanvas.height\n          );\n\n          const image = fullScaleCanvas.toDataURL(\"image/png\");\n\n          if (anchorRef.current) {\n            anchorRef.current.href = image;\n            anchorRef.current.click();\n          }\n        }}\n      />\n      <a\n        ref={anchorRef}\n        href=\"/\"\n        style={{ display: \"none\" }}\n        download=\"my-pixel-art.png\"\n      />\n    </>\n  );\n};\n","import { Box, Grid, Button } from \"grommet\";\nimport { Actions, Add } from \"grommet-icons\";\nimport { SaveButton } from \"./components/SaveButton\";\nexport const Footer = ({\n  canvas,\n  setCreateMenuShown,\n}: {\n  canvas: HTMLCanvasElement;\n  setCreateMenuShown: (value: boolean) => void;\n}) => {\n  return (\n    <Box\n      gridArea=\"footer\"\n      direction=\"row\"\n      pad={{ left: \"small\", right: \"small\" }}\n    >\n      <Grid\n        columns={{\n          count: 3,\n          size: [\"auto\", \"auto\", \"auto\"],\n        }}\n        fill\n        gap=\"small\"\n      >\n        <Box align=\"start\">\n          <Button icon={<Actions />} onClick={() => console.log(\"clicked\")} />\n        </Box>\n        <Box align=\"center\">\n          <Button icon={<Add />} onClick={() => setCreateMenuShown(true)} />\n        </Box>\n        <Box align=\"end\">{<SaveButton canvas={canvas} />}</Box>\n      </Grid>\n    </Box>\n  );\n};\n","import { Select } from \"grommet\";\nimport { ReactElement } from \"react\";\n\nconst validDimensions = [\n  { value: 1, label: \"1x1\" },\n  { value: 8, label: \"8x8\" },\n  { value: 10, label: \"10x10\" },\n  { value: 12, label: \"12x12\" },\n  { value: 14, label: \"14x14\" },\n  { value: 16, label: \"16x16\" },\n  { value: 18, label: \"18x18\" },\n  { value: 20, label: \"20x20\" },\n  { value: 22, label: \"22x22\" },\n  { value: 24, label: \"24x24\" },\n] as const;\n\nconst labelToValue = {\n  \"1x1\": 1,\n  \"8x8\": 8,\n  \"10x10\": 10,\n  \"12x12\": 12,\n  \"14x14\": 14,\n  \"16x16\": 16,\n  \"18x18\": 18,\n  \"20x20\": 20,\n  \"22x22\": 22,\n  \"24x24\": 24,\n} as const;\n\nconst valueToLabel = {\n  1: \"1x1\",\n  8: \"8x8\",\n  10: \"10x10\",\n  12: \"12x12\",\n  14: \"14x14\",\n  16: \"16x16\",\n  18: \"18x18\",\n  20: \"20x20\",\n  22: \"22x22\",\n  24: \"24x24\",\n} as const;\n\nconst options = [\n  \"1x1\",\n  \"8x8\",\n  \"10x10\",\n  \"12x12\",\n  \"14x14\",\n  \"16x16\",\n  \"18x18\",\n  \"20x20\",\n  \"22x22\",\n  \"24x24\",\n];\n\nexport type ValidDimensions = typeof validDimensions[number][\"value\"];\n\nexport const DimensionPicker = ({\n  dimension,\n  onDimensionChange,\n}: {\n  dimension: ValidDimensions;\n  onDimensionChange: (dimension: ValidDimensions) => void;\n}): ReactElement => {\n  return (\n    <Select\n      name=\"Select Dimensions\"\n      placeholder=\"8x8\"\n      value={valueToLabel[dimension]}\n      options={options}\n      onChange={({ option }: { option: keyof typeof labelToValue }) =>\n        onDimensionChange(labelToValue[option])\n      }\n    />\n  );\n};\n","import { Box, Button, Text } from \"grommet\";\nimport { useRef } from \"react\";\n\nexport const LoadButton = ({\n  setLoadedImage,\n}: {\n  setLoadedImage: (image: HTMLImageElement) => void;\n}) => {\n  const ref = useRef<HTMLInputElement>(null);\n  return (\n    <Box direction=\"row\" gap=\"small\">\n      <Button\n        label=\"Choose File\"\n        onClick={() => {\n          const input = ref.current;\n          if (!input) return;\n          input.click();\n        }}\n      />\n      <Text\n        alignSelf=\"center\"\n        onClick={() => {\n          const input = ref.current;\n          if (!input) return;\n          input.click();\n        }}\n      >\n        No File Chosen\n      </Text>\n      <input\n        ref={ref}\n        style={{ display: \"none\" }}\n        onChange={async (event) => {\n          const imagePromise = new Promise<HTMLImageElement>(\n            (resolve, reject) => {\n              if (!event.target.files || !event.target.files[0]) return;\n              const imageUrl = URL.createObjectURL(event.target.files![0]);\n              const image = new Image();\n              image.src = imageUrl;\n              image.onload = () => resolve(image);\n            }\n          );\n          const image = await imagePromise;\n          event.target.value = \"\";\n          setLoadedImage(image);\n        }}\n        type=\"file\"\n        accept=\"image/*\"\n      />\n    </Box>\n  );\n};\n","import { Layer, Box, Button, Grid, Text } from \"grommet\";\nimport React from \"react\";\nimport { DimensionPicker, ValidDimensions } from \"./components/DimensionPicker\";\nimport { LoadButton } from \"./components/LoadButton\";\n\nexport const NewModal = ({\n  onClickOutside,\n  onDimensionChange,\n  dimension,\n  setLoadedImage,\n  setCreateMenuShown,\n  createNew,\n}: {\n  onClickOutside: () => void;\n  onDimensionChange: (dimension: ValidDimensions) => void;\n  dimension: ValidDimensions;\n  setLoadedImage: (image: HTMLImageElement) => void;\n  setCreateMenuShown: () => void;\n  createNew: () => void;\n}) => {\n  return (\n    <Layer\n      modal\n      position=\"bottom\"\n      responsive={false}\n      full=\"horizontal\"\n      onClickOutside={onClickOutside}\n    >\n      <Box pad=\"small\" fill>\n        <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n          <Text>Canvas Dimensions</Text>\n          <DimensionPicker\n            onDimensionChange={onDimensionChange}\n            dimension={dimension}\n          />\n        </Box>\n        <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n          <Text>Upload Image (optional)</Text>\n          <LoadButton setLoadedImage={setLoadedImage} />\n        </Box>\n\n        <Grid\n          columns={{ count: 2, size: [\"auto\", \"auto\"] }}\n          gap=\"small\"\n          pad={{ top: \"medium\", bottom: \"small\" }}\n        >\n          <Button label=\"Cancel\" onClick={setCreateMenuShown} />\n\n          <Button primary label=\"Create New\" onClick={createNew} />\n        </Grid>\n      </Box>\n    </Layer>\n  );\n};\n","import { Button } from \"grommet\";\nimport { Box } from \"grommet/components/Box\";\nimport React from \"react\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { AvailablePalettes, paletteColorDictionary } from \"./PaletteDictionary\";\n\nexport const PaletteColourSwatch = ({\n  palette,\n  onColorPicked,\n}: {\n  palette: AvailablePalettes;\n  onColorPicked: (color: RGBColor) => void;\n}) => {\n  const paletteColors = paletteColorDictionary[palette];\n  const selectedPalette = paletteColors.map(RGBColor.fromHexString);\n  return (\n    <Box direction=\"row\" wrap justify=\"between\" alignSelf=\"center\">\n      {Object.values(selectedPalette).map((color, index) => (\n        <Box height=\"xsmall\" width=\"xsmall\" pad={{ bottom: \"xsmall\" }}>\n          <Button\n            fill=\"vertical\"\n            size=\"large\"\n            onClick={() => onColorPicked(color)}\n            key={index}\n            style={{\n              backgroundColor: color.toHex(),\n              borderRadius: \"0\",\n              border: \"none\",\n            }}\n          ></Button>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","import { Select } from \"grommet\";\nimport { ReactElement } from \"react\";\nimport { AvailablePalettes, paletteNameDictionary } from \"./PaletteDictionary\";\n\nconst options = [\"Commodore 64\", \"DOS CGA/ EGA\", \"Teletext\"];\n\nconst labelToValue = {\n  \"Commodore 64\": \"c64\",\n  \"DOS CGA/ EGA\": \"cga\",\n  Teletext: \"teletext\",\n} as const;\n\nexport const PalettePicker = ({\n  palette,\n  onPaletteChange,\n}: {\n  palette: AvailablePalettes;\n  onPaletteChange: (palette: AvailablePalettes) => void;\n}): ReactElement => {\n  const possiblePalettes = paletteNameDictionary;\n  return (\n    <Select\n      name=\"Select Palette\"\n      placeholder={possiblePalettes.c64}\n      value={paletteNameDictionary[palette]}\n      options={options}\n      onChange={({ option }: { option: keyof typeof labelToValue }) =>\n        onPaletteChange(labelToValue[option])\n      }\n    />\n  );\n};\n","import { Box, Grid, Layer } from \"grommet\";\nimport React from \"react\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { PaletteColourSwatch } from \"./PaletteColorSwatch\";\nimport { AvailablePalettes } from \"./PaletteDictionary\";\nimport { PalettePicker } from \"./PalettePicker\";\n\nexport const PaletteModal = ({\n  onClickOutside,\n  setColor,\n  palette,\n  setPalette,\n}: {\n  onClickOutside: () => void;\n  setColor: (color: RGBColor) => void;\n  palette: AvailablePalettes;\n  setPalette: (palette: AvailablePalettes) => void;\n}) => {\n  return (\n    <Layer\n      modal\n      position=\"top\"\n      responsive={false}\n      full=\"horizontal\"\n      onClickOutside={onClickOutside}\n    >\n      <Box pad=\"small\" fill>\n        <Box fill pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n          <PaletteColourSwatch\n            onColorPicked={(color) => {\n              setColor(color);\n              onClickOutside();\n            }}\n            palette={palette}\n          ></PaletteColourSwatch>\n        </Box>\n        <Box pad={{ top: \"small\", bottom: \"small\" }} gap=\"small\">\n          <PalettePicker\n            palette={palette}\n            onPaletteChange={setPalette}\n          ></PalettePicker>\n        </Box>\n\n        <Grid\n          columns={{ count: 2, size: [\"auto\", \"auto\"] }}\n          gap=\"small\"\n          pad={{ top: \"medium\", bottom: \"small\" }}\n        ></Grid>\n      </Box>\n    </Layer>\n  );\n};\n","import { IconProps } from \"grommet-icons\";\nimport { StyledIcon } from \"grommet-icons/StyledIcon\";\n\nexport const DropperIcon = (props: IconProps) => (\n  <StyledIcon viewBox=\"0 0 6.35 6.35\" a11yTitle=\"Add\" {...props}>\n    <g fill=\"none\" stroke=\"#000\" stroke-width=\".52917\">\n      <path d=\"m5.5002.60932c-.20131-.12441-.4432-.27888-.67352-.22451-.30901.072947-.38019.55202-.67352.67352-.13828.057276-.44901 0-.44901 0l-.22451.22451.22451.22451-2.9186 2.9186-.44901 1.347.22451.22451 1.347-.44901 2.9186-2.9186.22451.22451.22451-.22451s-.057276-.31073 1e-7-.44901c.1215-.29333.60057-.36451.67352-.67352.054371-.23032-.10009-.47221-.22451-.67352-.05564-.090027-.13448-.16887-.22451-.22451z\" />\n      <path d=\"m3.7042 1.5073 1.1225 1.1225\" />\n    </g>\n  </StyledIcon>\n);\n","import { IconProps } from \"grommet-icons\";\nimport { StyledIcon } from \"grommet-icons/StyledIcon\";\n\nexport const PaletteIcon = (props: IconProps) => (\n  <StyledIcon viewBox=\"0 0 6.35 6.35\" a11yTitle=\"Add\" {...props}>\n    <path\n      xmlns=\"http://www.w3.org/2000/svg\"\n      d=\"m5.926 3.1543c-.037745.39288-.36536.56457-.83971.54908-.38933-.01271-1.2873-.15741-1.475.24331-.22247.47492.58533.95042.5725 1.4362-.011288.42757-.61548.57263-1.0208.57263-1.526 0-2.763-1.2542-2.763-2.8012 2e-8-1.5471 1.237-2.8012 2.763-2.8012 1.526 0 2.911 1.2612 2.763 2.8012z\"\n      fill-opacity=\"0\"\n      stroke-width=\".52917\"\n    />\n    <circle cx=\"1.5769\" cy=\"3.5063\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"1.8923\" cy=\"2.1661\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"3.8408\" cy=\"1.7492\" r=\"0.3784252\" stroke=\"none\" />\n    <circle cx=\"2.7456\" cy=\"1.4877\" r=\"0.3784252\" stroke=\"none\" />\n  </StyledIcon>\n);\n","import { Button, ButtonProps } from \"grommet\";\nexport const HighlightableButton = ({\n  onClick,\n  isHighlighted,\n  ...props\n}: {\n  onClick: () => void;\n  isHighlighted: boolean;\n} & ButtonProps &\n  Omit<JSX.IntrinsicElements[\"button\"], \"color\">) => {\n  return (\n    <Button\n      onClick={onClick}\n      style={{\n        borderRadius: \"18px\",\n        boxShadow: isHighlighted ? \"0 0 2px 2px green\" : \"none\",\n      }}\n      {...props}\n    />\n  );\n};\n","import { Box, Button, Grid } from \"grommet\";\nimport {\n  Brush,\n  Erase,\n  Grid as GridIcon,\n  History,\n  Pin,\n  Redo,\n  Trash,\n  Undo,\n} from \"grommet-icons\";\nimport { DropperIcon } from \"./components/DropperIcon\";\nimport { PaletteIcon } from \"./components/PaletteIcon\";\nimport { RGBColor } from \"./drivers/Color\";\nimport { HighlightableButton } from \"./HighlightableButton\";\n\nexport const ToolsBanner = ({\n  onPickerModeClick,\n  onUndoClick,\n  onRedoClick,\n  onPaletteButtonClick,\n  onGridButtonClick,\n  onEraserButtonClick,\n  onPaintButtonClick,\n  onDropperButtonClick,\n  onTrashClick,\n  isDropper,\n  isGridShown,\n  isErasing,\n  color,\n  pickerMode,\n}: {\n  onPickerModeClick: (pickerMode: \"history\" | \"pinned\") => void;\n  onUndoClick: () => void;\n  onRedoClick: () => void;\n  onPaletteButtonClick: () => void;\n  onGridButtonClick: () => void;\n  onEraserButtonClick: () => void;\n  onPaintButtonClick: () => void;\n  onDropperButtonClick: () => void;\n  onTrashClick: () => void;\n  pickerMode: \"history\" | \"pinned\";\n  isDropper: boolean;\n  isGridShown: boolean;\n  isErasing: boolean;\n  color: RGBColor;\n}) => {\n  return (\n    <Grid\n      columns={[\"auto\", \"auto\"]}\n      rows={[\"flex\", \"flex\"]}\n      areas={[\n        { name: \"left-top\", start: [0, 0], end: [0, 0] },\n        { name: \"left-bot\", start: [0, 1], end: [0, 1] },\n        { name: \"right-top\", start: [1, 0], end: [1, 0] },\n        { name: \"right-bot\", start: [1, 1], end: [1, 1] },\n      ]}\n    >\n      <Box gridArea=\"left-top\" direction=\"row\">\n        <HighlightableButton\n          primary\n          onClick={onPaintButtonClick}\n          isHighlighted={!isErasing}\n          icon={<Brush />}\n          color={color.toHex()}\n        />\n        <HighlightableButton\n          onClick={onEraserButtonClick}\n          isHighlighted={isErasing}\n          icon={<Erase />}\n        />\n        <Button onClick={onPaletteButtonClick} icon={<PaletteIcon />} />\n        <HighlightableButton\n          onClick={onDropperButtonClick}\n          isHighlighted={isDropper}\n          icon={<DropperIcon />}\n        />\n      </Box>\n      <Box gridArea=\"left-bot\" direction=\"row\">\n        <HighlightableButton\n          icon={<Pin />}\n          onClick={() => onPickerModeClick(\"pinned\")}\n          isHighlighted={pickerMode === \"pinned\"}\n        />\n\n        <HighlightableButton\n          icon={<History />}\n          onClick={() => onPickerModeClick(\"history\")}\n          isHighlighted={pickerMode === \"history\"}\n        />\n      </Box>\n      <Box gridArea=\"right-top\" direction=\"row\" justify=\"end\">\n        <Button icon={<Undo />} onClick={onUndoClick} />\n        <Button icon={<Redo />} onClick={onRedoClick} />\n      </Box>\n      <Box gridArea=\"right-bot\" direction=\"row\" justify=\"end\">\n        <Button onClick={onTrashClick} icon={<Trash />} />\n        <HighlightableButton\n          onClick={onGridButtonClick}\n          isHighlighted={isGridShown}\n          icon={<GridIcon />}\n        />\n      </Box>\n    </Grid>\n  );\n};\n","import { Box, Grid, grommet, Grommet, Stack } from \"grommet\";\nimport React, { useMemo, useState } from \"react\";\nimport { BodyColorPicker } from \"./BodyColorPicker\";\nimport { CanvasContainer } from \"./components/CanvasContainer\";\nimport { ColorPickerSwatch } from \"./components/ColorPickerSwatch\";\nimport { ValidDimensions } from \"./components/DimensionPicker\";\nimport { Grid as ComponentGrid } from \"./components/Grid\";\nimport { ConfirmModal, ConfirmModalProps } from \"./ConfirmModal\";\nimport { NoColor, RGBColor } from \"./drivers/Color\";\nimport { UndoablePaintCanvas } from \"./drivers/UndoablePaintCanvas\";\nimport { Footer } from \"./Footer\";\nimport { NewModal } from \"./NewModal\";\nimport { AvailablePalettes } from \"./PaletteDictionary\";\nimport { PaletteModal } from \"./PaletteModal\";\nimport { ToolsBanner } from \"./ToolsBanner\";\n\nconst defaultPalette = \"cga\";\nconst defaultColor = \"#5555ff\";\nfunction App() {\n  const [pixelDimensions, setPixelDimensions] = useState<ValidDimensions>(8);\n  const [color, setColor] = useState<RGBColor>(\n    RGBColor.fromHexString(defaultColor)\n  );\n\n  const setColorMode = (color: RGBColor | NoColor) => {\n    if (color === RGBColor.NO_COLOR) {\n      setIsErasing(true);\n    } else {\n      setIsErasing(false);\n      setColor(color);\n    }\n  };\n\n  const [confirmModalParameters, setConfirmModalParameters] = useState<\n    ConfirmModalProps | undefined\n  >(undefined);\n  const [pickerMode, setPickerMode] = useState<\"history\" | \"pinned\">(\"pinned\");\n  const [isDropper, setIsDropper] = useState(false);\n  const [isErasing, setIsErasing] = useState(false);\n  const [isGridShown, setGridShown] = useState(false);\n  const [isPaletteMenuShown, setPaletteMenuShown] = useState(false);\n  const [palette, setPalette] = useState<AvailablePalettes>(defaultPalette);\n  const [isCreateMenuShown, setCreateMenuShown] = useState(false);\n  const [canvas, setCanvas] = useState<undefined | HTMLCanvasElement>();\n\n  const paint = useMemo(() => {\n    return new UndoablePaintCanvas(pixelDimensions);\n  }, [pixelDimensions]);\n\n  const onCanvasTouch = (\n    canvas: HTMLCanvasElement,\n    event: React.TouchEvent<HTMLCanvasElement>\n  ): void => {\n    if (isDropper) {\n      const coords = paint.touchToCoords(event);\n      const color = paint.getColorAt(coords.quantX, coords.quantY);\n      setColorMode(color);\n      setIsDropper(false);\n      return;\n    }\n\n    paint.setCanvas(canvas);\n    paint.touchEvent(event, isErasing ? RGBColor.NO_COLOR : color);\n    paint.drawToCanvas();\n  };\n\n  const onCanvasCreated = (canvas: HTMLCanvasElement): void => {\n    setCanvas(canvas);\n    paint.setCanvas(canvas);\n  };\n\n  const onUndoClick = () => {\n    paint.undo();\n    paint.drawToCanvas();\n  };\n\n  const onRedoClick = () => {\n    paint.redo();\n    paint.drawToCanvas();\n  };\n\n  const onPaletteButtonClick = () => setPaletteMenuShown(!isPaletteMenuShown);\n  const onDropperButtonClick = () => setIsDropper(true);\n  const onGridButtonClick = () => setGridShown(!isGridShown);\n  const onEraserButtonClick = () => {\n    setIsDropper(false);\n    setColorMode(RGBColor.NO_COLOR);\n  };\n\n  const onPaintButtonClick = () => {\n    setIsDropper(false);\n    setColorMode(color);\n  };\n\n  const onTrashClick = () => {\n    setConfirmModalParameters({\n      onAccept: () => {\n        setConfirmModalParameters(undefined);\n\n        paint.clear();\n        if (paint.hasCanvas()) {\n          paint.drawToCanvas();\n        } else {\n          console.warn(\"Tried to clear a canvas that doesn't exist\");\n        }\n      },\n      message: \"Are you sure you want to clear the canvas?\",\n      acceptButtonText: \"Clear\",\n      onCancel: () => {\n        setConfirmModalParameters(undefined);\n      },\n    });\n  };\n\n  const setColorAndTurnOffPicker = (color: RGBColor): void => {\n    setIsDropper(false);\n    setColorMode(color);\n  };\n\n  return (\n    <Grommet theme={grommet} style={{ height: \"100%\" }} themeMode=\"light\">\n      <Grid\n        fill\n        areas={[\n          { name: \"canvas\", start: [0, 0], end: [0, 0] },\n          { name: \"body\", start: [0, 1], end: [0, 1] },\n          { name: \"footer\", start: [0, 2], end: [0, 2] },\n        ]}\n        columns={[\"full\"]}\n        rows={[\"auto\", \"flex\", \"xxsmall\"]}\n      >\n        <Stack\n          gridArea=\"canvas\"\n          interactiveChild={isPaletteMenuShown ? 1 : \"first\"}\n        >\n          <CanvasContainer\n            onCanvasCreated={onCanvasCreated}\n            pixelDimensions={pixelDimensions}\n            onTouchEvent={onCanvasTouch}\n          />\n\n          {isPaletteMenuShown && (\n            <ColorPickerSwatch\n              selectedColor={color}\n              onColorPicked={(color) => {\n                setIsDropper(false);\n                setColorMode(color);\n              }}\n            />\n          )}\n\n          {canvas && isGridShown && (\n            <ComponentGrid\n              pixelDimensions={pixelDimensions}\n              rootCanvas={canvas}\n            />\n          )}\n        </Stack>\n        <Box gridArea=\"body\" pad=\"small\">\n          <ToolsBanner\n            color={color}\n            isDropper={isDropper}\n            isErasing={isErasing}\n            isGridShown={isGridShown}\n            onPickerModeClick={setPickerMode}\n            onDropperButtonClick={onDropperButtonClick}\n            onEraserButtonClick={onEraserButtonClick}\n            onGridButtonClick={onGridButtonClick}\n            onPaintButtonClick={onPaintButtonClick}\n            onPaletteButtonClick={onPaletteButtonClick}\n            onRedoClick={onRedoClick}\n            onUndoClick={onUndoClick}\n            onTrashClick={onTrashClick}\n            pickerMode={pickerMode}\n          />\n\n          <BodyColorPicker\n            pickerMode={pickerMode}\n            color={color}\n            palette={palette}\n            setColorAndTurnOffPicker={setColorAndTurnOffPicker}\n          />\n        </Box>\n        {canvas && (\n          <Footer canvas={canvas} setCreateMenuShown={setCreateMenuShown} />\n        )}\n      </Grid>\n\n      {isPaletteMenuShown && (\n        <PaletteModal\n          onClickOutside={() => setPaletteMenuShown(false)}\n          setColor={setColorAndTurnOffPicker}\n          palette={palette}\n          setPalette={(palette) => setPalette(palette)}\n        />\n      )}\n\n      {!!confirmModalParameters && (\n        <ConfirmModal\n          onAccept={confirmModalParameters.onAccept}\n          onCancel={confirmModalParameters.onCancel}\n          cancelButtonText={confirmModalParameters.cancelButtonText}\n          acceptButtonText={confirmModalParameters.acceptButtonText}\n          message={confirmModalParameters.message}\n        />\n      )}\n\n      {isCreateMenuShown && (\n        <NewModal\n          onClickOutside={() => setCreateMenuShown(false)}\n          onDimensionChange={setPixelDimensions}\n          dimension={pixelDimensions}\n          setLoadedImage={(image) => {\n            paint.setPixelsFromImage(image);\n            paint.drawToCanvas();\n          }}\n          setCreateMenuShown={() => setCreateMenuShown(false)}\n          createNew={() => {\n            paint.clear();\n            paint.drawToCanvas();\n          }}\n        />\n      )}\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}